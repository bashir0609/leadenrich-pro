
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Provider
 * 
 */
export type Provider = $Result.DefaultSelection<Prisma.$ProviderPayload>
/**
 * Model ProviderFeature
 * 
 */
export type ProviderFeature = $Result.DefaultSelection<Prisma.$ProviderFeaturePayload>
/**
 * Model EnrichmentJob
 * 
 */
export type EnrichmentJob = $Result.DefaultSelection<Prisma.$EnrichmentJobPayload>
/**
 * Model JobLog
 * 
 */
export type JobLog = $Result.DefaultSelection<Prisma.$JobLogPayload>
/**
 * Model ApiUsage
 * 
 */
export type ApiUsage = $Result.DefaultSelection<Prisma.$ApiUsagePayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Providers
 * const providers = await prisma.provider.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Providers
   * const providers = await prisma.provider.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.provider`: Exposes CRUD operations for the **Provider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Providers
    * const providers = await prisma.provider.findMany()
    * ```
    */
  get provider(): Prisma.ProviderDelegate<ExtArgs>;

  /**
   * `prisma.providerFeature`: Exposes CRUD operations for the **ProviderFeature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProviderFeatures
    * const providerFeatures = await prisma.providerFeature.findMany()
    * ```
    */
  get providerFeature(): Prisma.ProviderFeatureDelegate<ExtArgs>;

  /**
   * `prisma.enrichmentJob`: Exposes CRUD operations for the **EnrichmentJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EnrichmentJobs
    * const enrichmentJobs = await prisma.enrichmentJob.findMany()
    * ```
    */
  get enrichmentJob(): Prisma.EnrichmentJobDelegate<ExtArgs>;

  /**
   * `prisma.jobLog`: Exposes CRUD operations for the **JobLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobLogs
    * const jobLogs = await prisma.jobLog.findMany()
    * ```
    */
  get jobLog(): Prisma.JobLogDelegate<ExtArgs>;

  /**
   * `prisma.apiUsage`: Exposes CRUD operations for the **ApiUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiUsages
    * const apiUsages = await prisma.apiUsage.findMany()
    * ```
    */
  get apiUsage(): Prisma.ApiUsageDelegate<ExtArgs>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.1
   * Query Engine version: 6a3747c37ff169c90047725a05a6ef02e32ac97e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Provider: 'Provider',
    ProviderFeature: 'ProviderFeature',
    EnrichmentJob: 'EnrichmentJob',
    JobLog: 'JobLog',
    ApiUsage: 'ApiUsage',
    SystemConfig: 'SystemConfig',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'provider' | 'providerFeature' | 'enrichmentJob' | 'jobLog' | 'apiUsage' | 'systemConfig' | 'user'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Provider: {
        payload: Prisma.$ProviderPayload<ExtArgs>
        fields: Prisma.ProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProviderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findFirst: {
            args: Prisma.ProviderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findMany: {
            args: Prisma.ProviderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          create: {
            args: Prisma.ProviderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          createMany: {
            args: Prisma.ProviderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProviderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          update: {
            args: Prisma.ProviderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          deleteMany: {
            args: Prisma.ProviderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProviderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          aggregate: {
            args: Prisma.ProviderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProvider>
          }
          groupBy: {
            args: Prisma.ProviderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderCountArgs<ExtArgs>,
            result: $Utils.Optional<ProviderCountAggregateOutputType> | number
          }
        }
      }
      ProviderFeature: {
        payload: Prisma.$ProviderFeaturePayload<ExtArgs>
        fields: Prisma.ProviderFeatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProviderFeatureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderFeatureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload>
          }
          findFirst: {
            args: Prisma.ProviderFeatureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderFeatureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload>
          }
          findMany: {
            args: Prisma.ProviderFeatureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload>[]
          }
          create: {
            args: Prisma.ProviderFeatureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload>
          }
          createMany: {
            args: Prisma.ProviderFeatureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProviderFeatureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload>
          }
          update: {
            args: Prisma.ProviderFeatureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload>
          }
          deleteMany: {
            args: Prisma.ProviderFeatureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderFeatureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProviderFeatureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProviderFeaturePayload>
          }
          aggregate: {
            args: Prisma.ProviderFeatureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProviderFeature>
          }
          groupBy: {
            args: Prisma.ProviderFeatureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProviderFeatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderFeatureCountArgs<ExtArgs>,
            result: $Utils.Optional<ProviderFeatureCountAggregateOutputType> | number
          }
        }
      }
      EnrichmentJob: {
        payload: Prisma.$EnrichmentJobPayload<ExtArgs>
        fields: Prisma.EnrichmentJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrichmentJobFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrichmentJobFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload>
          }
          findFirst: {
            args: Prisma.EnrichmentJobFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrichmentJobFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload>
          }
          findMany: {
            args: Prisma.EnrichmentJobFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload>[]
          }
          create: {
            args: Prisma.EnrichmentJobCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload>
          }
          createMany: {
            args: Prisma.EnrichmentJobCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EnrichmentJobDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload>
          }
          update: {
            args: Prisma.EnrichmentJobUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload>
          }
          deleteMany: {
            args: Prisma.EnrichmentJobDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EnrichmentJobUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EnrichmentJobUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EnrichmentJobPayload>
          }
          aggregate: {
            args: Prisma.EnrichmentJobAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEnrichmentJob>
          }
          groupBy: {
            args: Prisma.EnrichmentJobGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EnrichmentJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrichmentJobCountArgs<ExtArgs>,
            result: $Utils.Optional<EnrichmentJobCountAggregateOutputType> | number
          }
        }
      }
      JobLog: {
        payload: Prisma.$JobLogPayload<ExtArgs>
        fields: Prisma.JobLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload>
          }
          findFirst: {
            args: Prisma.JobLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload>
          }
          findMany: {
            args: Prisma.JobLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload>[]
          }
          create: {
            args: Prisma.JobLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload>
          }
          createMany: {
            args: Prisma.JobLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.JobLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload>
          }
          update: {
            args: Prisma.JobLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload>
          }
          deleteMany: {
            args: Prisma.JobLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JobLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JobLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JobLogPayload>
          }
          aggregate: {
            args: Prisma.JobLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJobLog>
          }
          groupBy: {
            args: Prisma.JobLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JobLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobLogCountArgs<ExtArgs>,
            result: $Utils.Optional<JobLogCountAggregateOutputType> | number
          }
        }
      }
      ApiUsage: {
        payload: Prisma.$ApiUsagePayload<ExtArgs>
        fields: Prisma.ApiUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiUsageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiUsageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload>
          }
          findFirst: {
            args: Prisma.ApiUsageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiUsageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload>
          }
          findMany: {
            args: Prisma.ApiUsageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload>[]
          }
          create: {
            args: Prisma.ApiUsageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload>
          }
          createMany: {
            args: Prisma.ApiUsageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ApiUsageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload>
          }
          update: {
            args: Prisma.ApiUsageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload>
          }
          deleteMany: {
            args: Prisma.ApiUsageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ApiUsageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ApiUsageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApiUsagePayload>
          }
          aggregate: {
            args: Prisma.ApiUsageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApiUsage>
          }
          groupBy: {
            args: Prisma.ApiUsageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ApiUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiUsageCountArgs<ExtArgs>,
            result: $Utils.Optional<ApiUsageCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>,
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProviderCountOutputType
   */

  export type ProviderCountOutputType = {
    features: number
    apiUsage: number
    enrichmentJobs: number
  }

  export type ProviderCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    features?: boolean | ProviderCountOutputTypeCountFeaturesArgs
    apiUsage?: boolean | ProviderCountOutputTypeCountApiUsageArgs
    enrichmentJobs?: boolean | ProviderCountOutputTypeCountEnrichmentJobsArgs
  }

  // Custom InputTypes

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderCountOutputType
     */
    select?: ProviderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountFeaturesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProviderFeatureWhereInput
  }


  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountApiUsageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ApiUsageWhereInput
  }


  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountEnrichmentJobsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EnrichmentJobWhereInput
  }



  /**
   * Count Type EnrichmentJobCountOutputType
   */

  export type EnrichmentJobCountOutputType = {
    logs: number
  }

  export type EnrichmentJobCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    logs?: boolean | EnrichmentJobCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes

  /**
   * EnrichmentJobCountOutputType without action
   */
  export type EnrichmentJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJobCountOutputType
     */
    select?: EnrichmentJobCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EnrichmentJobCountOutputType without action
   */
  export type EnrichmentJobCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: JobLogWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Provider
   */

  export type AggregateProvider = {
    _count: ProviderCountAggregateOutputType | null
    _avg: ProviderAvgAggregateOutputType | null
    _sum: ProviderSumAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  export type ProviderAvgAggregateOutputType = {
    id: number | null
    rateLimit: number | null
    dailyQuota: number | null
  }

  export type ProviderSumAggregateOutputType = {
    id: number | null
    rateLimit: number | null
    dailyQuota: number | null
  }

  export type ProviderMinAggregateOutputType = {
    id: number | null
    name: string | null
    displayName: string | null
    category: string | null
    apiKeyEncrypted: string | null
    baseUrl: string | null
    rateLimit: number | null
    dailyQuota: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProviderMaxAggregateOutputType = {
    id: number | null
    name: string | null
    displayName: string | null
    category: string | null
    apiKeyEncrypted: string | null
    baseUrl: string | null
    rateLimit: number | null
    dailyQuota: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProviderCountAggregateOutputType = {
    id: number
    name: number
    displayName: number
    category: number
    apiKeyEncrypted: number
    baseUrl: number
    rateLimit: number
    dailyQuota: number
    isActive: number
    configuration: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProviderAvgAggregateInputType = {
    id?: true
    rateLimit?: true
    dailyQuota?: true
  }

  export type ProviderSumAggregateInputType = {
    id?: true
    rateLimit?: true
    dailyQuota?: true
  }

  export type ProviderMinAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    category?: true
    apiKeyEncrypted?: true
    baseUrl?: true
    rateLimit?: true
    dailyQuota?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProviderMaxAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    category?: true
    apiKeyEncrypted?: true
    baseUrl?: true
    rateLimit?: true
    dailyQuota?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProviderCountAggregateInputType = {
    id?: true
    name?: true
    displayName?: true
    category?: true
    apiKeyEncrypted?: true
    baseUrl?: true
    rateLimit?: true
    dailyQuota?: true
    isActive?: true
    configuration?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProviderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Provider to aggregate.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Providers
    **/
    _count?: true | ProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProviderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProviderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderMaxAggregateInputType
  }

  export type GetProviderAggregateType<T extends ProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvider[P]>
      : GetScalarType<T[P], AggregateProvider[P]>
  }




  export type ProviderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProviderWhereInput
    orderBy?: ProviderOrderByWithAggregationInput | ProviderOrderByWithAggregationInput[]
    by: ProviderScalarFieldEnum[] | ProviderScalarFieldEnum
    having?: ProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderCountAggregateInputType | true
    _avg?: ProviderAvgAggregateInputType
    _sum?: ProviderSumAggregateInputType
    _min?: ProviderMinAggregateInputType
    _max?: ProviderMaxAggregateInputType
  }

  export type ProviderGroupByOutputType = {
    id: number
    name: string
    displayName: string
    category: string
    apiKeyEncrypted: string | null
    baseUrl: string
    rateLimit: number
    dailyQuota: number
    isActive: boolean
    configuration: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProviderCountAggregateOutputType | null
    _avg: ProviderAvgAggregateOutputType | null
    _sum: ProviderSumAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  type GetProviderGroupByPayload<T extends ProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderGroupByOutputType[P]>
        }
      >
    >


  export type ProviderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    displayName?: boolean
    category?: boolean
    apiKeyEncrypted?: boolean
    baseUrl?: boolean
    rateLimit?: boolean
    dailyQuota?: boolean
    isActive?: boolean
    configuration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    features?: boolean | Provider$featuresArgs<ExtArgs>
    apiUsage?: boolean | Provider$apiUsageArgs<ExtArgs>
    enrichmentJobs?: boolean | Provider$enrichmentJobsArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectScalar = {
    id?: boolean
    name?: boolean
    displayName?: boolean
    category?: boolean
    apiKeyEncrypted?: boolean
    baseUrl?: boolean
    rateLimit?: boolean
    dailyQuota?: boolean
    isActive?: boolean
    configuration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProviderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    features?: boolean | Provider$featuresArgs<ExtArgs>
    apiUsage?: boolean | Provider$apiUsageArgs<ExtArgs>
    enrichmentJobs?: boolean | Provider$enrichmentJobsArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProviderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Provider"
    objects: {
      features: Prisma.$ProviderFeaturePayload<ExtArgs>[]
      apiUsage: Prisma.$ApiUsagePayload<ExtArgs>[]
      enrichmentJobs: Prisma.$EnrichmentJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      displayName: string
      category: string
      apiKeyEncrypted: string | null
      baseUrl: string
      rateLimit: number
      dailyQuota: number
      isActive: boolean
      configuration: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["provider"]>
    composites: {}
  }


  type ProviderGetPayload<S extends boolean | null | undefined | ProviderDefaultArgs> = $Result.GetResult<Prisma.$ProviderPayload, S>

  type ProviderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProviderFindManyArgs, 'select' | 'include'> & {
      select?: ProviderCountAggregateInputType | true
    }

  export interface ProviderDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Provider'], meta: { name: 'Provider' } }
    /**
     * Find zero or one Provider that matches the filter.
     * @param {ProviderFindUniqueArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProviderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderFindUniqueArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Provider that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProviderFindUniqueOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProviderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Provider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProviderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFindFirstArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Provider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProviderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Providers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Providers
     * const providers = await prisma.provider.findMany()
     * 
     * // Get first 10 Providers
     * const providers = await prisma.provider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerWithIdOnly = await prisma.provider.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProviderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Provider.
     * @param {ProviderCreateArgs} args - Arguments to create a Provider.
     * @example
     * // Create one Provider
     * const Provider = await prisma.provider.create({
     *   data: {
     *     // ... data to create a Provider
     *   }
     * })
     * 
    **/
    create<T extends ProviderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderCreateArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Providers.
     *     @param {ProviderCreateManyArgs} args - Arguments to create many Providers.
     *     @example
     *     // Create many Providers
     *     const provider = await prisma.provider.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProviderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Provider.
     * @param {ProviderDeleteArgs} args - Arguments to delete one Provider.
     * @example
     * // Delete one Provider
     * const Provider = await prisma.provider.delete({
     *   where: {
     *     // ... filter to delete one Provider
     *   }
     * })
     * 
    **/
    delete<T extends ProviderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderDeleteArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Provider.
     * @param {ProviderUpdateArgs} args - Arguments to update one Provider.
     * @example
     * // Update one Provider
     * const provider = await prisma.provider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProviderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderUpdateArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Providers.
     * @param {ProviderDeleteManyArgs} args - Arguments to filter Providers to delete.
     * @example
     * // Delete a few Providers
     * const { count } = await prisma.provider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProviderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Providers
     * const provider = await prisma.provider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProviderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Provider.
     * @param {ProviderUpsertArgs} args - Arguments to update or create a Provider.
     * @example
     * // Update or create a Provider
     * const provider = await prisma.provider.upsert({
     *   create: {
     *     // ... data to create a Provider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Provider we want to update
     *   }
     * })
    **/
    upsert<T extends ProviderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderUpsertArgs<ExtArgs>>
    ): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderCountArgs} args - Arguments to filter Providers to count.
     * @example
     * // Count the number of Providers
     * const count = await prisma.provider.count({
     *   where: {
     *     // ... the filter for the Providers we want to count
     *   }
     * })
    **/
    count<T extends ProviderCountArgs>(
      args?: Subset<T, ProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderAggregateArgs>(args: Subset<T, ProviderAggregateArgs>): Prisma.PrismaPromise<GetProviderAggregateType<T>>

    /**
     * Group by Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderGroupByArgs['orderBy'] }
        : { orderBy?: ProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Provider model
   */
  readonly fields: ProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Provider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProviderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    features<T extends Provider$featuresArgs<ExtArgs> = {}>(args?: Subset<T, Provider$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'findMany'> | Null>;

    apiUsage<T extends Provider$apiUsageArgs<ExtArgs> = {}>(args?: Subset<T, Provider$apiUsageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'findMany'> | Null>;

    enrichmentJobs<T extends Provider$enrichmentJobsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$enrichmentJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Provider model
   */ 
  interface ProviderFieldRefs {
    readonly id: FieldRef<"Provider", 'Int'>
    readonly name: FieldRef<"Provider", 'String'>
    readonly displayName: FieldRef<"Provider", 'String'>
    readonly category: FieldRef<"Provider", 'String'>
    readonly apiKeyEncrypted: FieldRef<"Provider", 'String'>
    readonly baseUrl: FieldRef<"Provider", 'String'>
    readonly rateLimit: FieldRef<"Provider", 'Int'>
    readonly dailyQuota: FieldRef<"Provider", 'Int'>
    readonly isActive: FieldRef<"Provider", 'Boolean'>
    readonly configuration: FieldRef<"Provider", 'Json'>
    readonly createdAt: FieldRef<"Provider", 'DateTime'>
    readonly updatedAt: FieldRef<"Provider", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Provider findUnique
   */
  export type ProviderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }


  /**
   * Provider findUniqueOrThrow
   */
  export type ProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }


  /**
   * Provider findFirst
   */
  export type ProviderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }


  /**
   * Provider findFirstOrThrow
   */
  export type ProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }


  /**
   * Provider findMany
   */
  export type ProviderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Providers to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }


  /**
   * Provider create
   */
  export type ProviderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a Provider.
     */
    data: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
  }


  /**
   * Provider createMany
   */
  export type ProviderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Providers.
     */
    data: ProviderCreateManyInput | ProviderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Provider update
   */
  export type ProviderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a Provider.
     */
    data: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
    /**
     * Choose, which Provider to update.
     */
    where: ProviderWhereUniqueInput
  }


  /**
   * Provider updateMany
   */
  export type ProviderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Providers.
     */
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyInput>
    /**
     * Filter which Providers to update
     */
    where?: ProviderWhereInput
  }


  /**
   * Provider upsert
   */
  export type ProviderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the Provider to update in case it exists.
     */
    where: ProviderWhereUniqueInput
    /**
     * In case the Provider found by the `where` argument doesn't exist, create a new Provider with this data.
     */
    create: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
    /**
     * In case the Provider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
  }


  /**
   * Provider delete
   */
  export type ProviderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter which Provider to delete.
     */
    where: ProviderWhereUniqueInput
  }


  /**
   * Provider deleteMany
   */
  export type ProviderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Providers to delete
     */
    where?: ProviderWhereInput
  }


  /**
   * Provider.features
   */
  export type Provider$featuresArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    where?: ProviderFeatureWhereInput
    orderBy?: ProviderFeatureOrderByWithRelationInput | ProviderFeatureOrderByWithRelationInput[]
    cursor?: ProviderFeatureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProviderFeatureScalarFieldEnum | ProviderFeatureScalarFieldEnum[]
  }


  /**
   * Provider.apiUsage
   */
  export type Provider$apiUsageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    where?: ApiUsageWhereInput
    orderBy?: ApiUsageOrderByWithRelationInput | ApiUsageOrderByWithRelationInput[]
    cursor?: ApiUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApiUsageScalarFieldEnum | ApiUsageScalarFieldEnum[]
  }


  /**
   * Provider.enrichmentJobs
   */
  export type Provider$enrichmentJobsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    where?: EnrichmentJobWhereInput
    orderBy?: EnrichmentJobOrderByWithRelationInput | EnrichmentJobOrderByWithRelationInput[]
    cursor?: EnrichmentJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrichmentJobScalarFieldEnum | EnrichmentJobScalarFieldEnum[]
  }


  /**
   * Provider without action
   */
  export type ProviderDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
  }



  /**
   * Model ProviderFeature
   */

  export type AggregateProviderFeature = {
    _count: ProviderFeatureCountAggregateOutputType | null
    _avg: ProviderFeatureAvgAggregateOutputType | null
    _sum: ProviderFeatureSumAggregateOutputType | null
    _min: ProviderFeatureMinAggregateOutputType | null
    _max: ProviderFeatureMaxAggregateOutputType | null
  }

  export type ProviderFeatureAvgAggregateOutputType = {
    id: number | null
    providerId: number | null
    creditsPerRequest: number | null
  }

  export type ProviderFeatureSumAggregateOutputType = {
    id: number | null
    providerId: number | null
    creditsPerRequest: number | null
  }

  export type ProviderFeatureMinAggregateOutputType = {
    id: number | null
    providerId: number | null
    featureId: string | null
    featureName: string | null
    category: string | null
    endpoint: string | null
    httpMethod: string | null
    creditsPerRequest: number | null
    isActive: boolean | null
    description: string | null
    createdAt: Date | null
  }

  export type ProviderFeatureMaxAggregateOutputType = {
    id: number | null
    providerId: number | null
    featureId: string | null
    featureName: string | null
    category: string | null
    endpoint: string | null
    httpMethod: string | null
    creditsPerRequest: number | null
    isActive: boolean | null
    description: string | null
    createdAt: Date | null
  }

  export type ProviderFeatureCountAggregateOutputType = {
    id: number
    providerId: number
    featureId: number
    featureName: number
    category: number
    endpoint: number
    httpMethod: number
    creditsPerRequest: number
    isActive: number
    parameters: number
    description: number
    createdAt: number
    _all: number
  }


  export type ProviderFeatureAvgAggregateInputType = {
    id?: true
    providerId?: true
    creditsPerRequest?: true
  }

  export type ProviderFeatureSumAggregateInputType = {
    id?: true
    providerId?: true
    creditsPerRequest?: true
  }

  export type ProviderFeatureMinAggregateInputType = {
    id?: true
    providerId?: true
    featureId?: true
    featureName?: true
    category?: true
    endpoint?: true
    httpMethod?: true
    creditsPerRequest?: true
    isActive?: true
    description?: true
    createdAt?: true
  }

  export type ProviderFeatureMaxAggregateInputType = {
    id?: true
    providerId?: true
    featureId?: true
    featureName?: true
    category?: true
    endpoint?: true
    httpMethod?: true
    creditsPerRequest?: true
    isActive?: true
    description?: true
    createdAt?: true
  }

  export type ProviderFeatureCountAggregateInputType = {
    id?: true
    providerId?: true
    featureId?: true
    featureName?: true
    category?: true
    endpoint?: true
    httpMethod?: true
    creditsPerRequest?: true
    isActive?: true
    parameters?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type ProviderFeatureAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderFeature to aggregate.
     */
    where?: ProviderFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderFeatures to fetch.
     */
    orderBy?: ProviderFeatureOrderByWithRelationInput | ProviderFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProviderFeatures
    **/
    _count?: true | ProviderFeatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProviderFeatureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProviderFeatureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderFeatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderFeatureMaxAggregateInputType
  }

  export type GetProviderFeatureAggregateType<T extends ProviderFeatureAggregateArgs> = {
        [P in keyof T & keyof AggregateProviderFeature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProviderFeature[P]>
      : GetScalarType<T[P], AggregateProviderFeature[P]>
  }




  export type ProviderFeatureGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProviderFeatureWhereInput
    orderBy?: ProviderFeatureOrderByWithAggregationInput | ProviderFeatureOrderByWithAggregationInput[]
    by: ProviderFeatureScalarFieldEnum[] | ProviderFeatureScalarFieldEnum
    having?: ProviderFeatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderFeatureCountAggregateInputType | true
    _avg?: ProviderFeatureAvgAggregateInputType
    _sum?: ProviderFeatureSumAggregateInputType
    _min?: ProviderFeatureMinAggregateInputType
    _max?: ProviderFeatureMaxAggregateInputType
  }

  export type ProviderFeatureGroupByOutputType = {
    id: number
    providerId: number
    featureId: string
    featureName: string
    category: string
    endpoint: string
    httpMethod: string
    creditsPerRequest: number
    isActive: boolean
    parameters: JsonValue | null
    description: string | null
    createdAt: Date
    _count: ProviderFeatureCountAggregateOutputType | null
    _avg: ProviderFeatureAvgAggregateOutputType | null
    _sum: ProviderFeatureSumAggregateOutputType | null
    _min: ProviderFeatureMinAggregateOutputType | null
    _max: ProviderFeatureMaxAggregateOutputType | null
  }

  type GetProviderFeatureGroupByPayload<T extends ProviderFeatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProviderFeatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderFeatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderFeatureGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderFeatureGroupByOutputType[P]>
        }
      >
    >


  export type ProviderFeatureSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    featureId?: boolean
    featureName?: boolean
    category?: boolean
    endpoint?: boolean
    httpMethod?: boolean
    creditsPerRequest?: boolean
    isActive?: boolean
    parameters?: boolean
    description?: boolean
    createdAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["providerFeature"]>

  export type ProviderFeatureSelectScalar = {
    id?: boolean
    providerId?: boolean
    featureId?: boolean
    featureName?: boolean
    category?: boolean
    endpoint?: boolean
    httpMethod?: boolean
    creditsPerRequest?: boolean
    isActive?: boolean
    parameters?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type ProviderFeatureInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }


  export type $ProviderFeaturePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ProviderFeature"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      providerId: number
      featureId: string
      featureName: string
      category: string
      endpoint: string
      httpMethod: string
      creditsPerRequest: number
      isActive: boolean
      parameters: Prisma.JsonValue | null
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["providerFeature"]>
    composites: {}
  }


  type ProviderFeatureGetPayload<S extends boolean | null | undefined | ProviderFeatureDefaultArgs> = $Result.GetResult<Prisma.$ProviderFeaturePayload, S>

  type ProviderFeatureCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProviderFeatureFindManyArgs, 'select' | 'include'> & {
      select?: ProviderFeatureCountAggregateInputType | true
    }

  export interface ProviderFeatureDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProviderFeature'], meta: { name: 'ProviderFeature' } }
    /**
     * Find zero or one ProviderFeature that matches the filter.
     * @param {ProviderFeatureFindUniqueArgs} args - Arguments to find a ProviderFeature
     * @example
     * // Get one ProviderFeature
     * const providerFeature = await prisma.providerFeature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProviderFeatureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderFeatureFindUniqueArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProviderFeature that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProviderFeatureFindUniqueOrThrowArgs} args - Arguments to find a ProviderFeature
     * @example
     * // Get one ProviderFeature
     * const providerFeature = await prisma.providerFeature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProviderFeatureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFeatureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProviderFeature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFeatureFindFirstArgs} args - Arguments to find a ProviderFeature
     * @example
     * // Get one ProviderFeature
     * const providerFeature = await prisma.providerFeature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProviderFeatureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFeatureFindFirstArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProviderFeature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFeatureFindFirstOrThrowArgs} args - Arguments to find a ProviderFeature
     * @example
     * // Get one ProviderFeature
     * const providerFeature = await prisma.providerFeature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProviderFeatureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFeatureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProviderFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFeatureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProviderFeatures
     * const providerFeatures = await prisma.providerFeature.findMany()
     * 
     * // Get first 10 ProviderFeatures
     * const providerFeatures = await prisma.providerFeature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerFeatureWithIdOnly = await prisma.providerFeature.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProviderFeatureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFeatureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProviderFeature.
     * @param {ProviderFeatureCreateArgs} args - Arguments to create a ProviderFeature.
     * @example
     * // Create one ProviderFeature
     * const ProviderFeature = await prisma.providerFeature.create({
     *   data: {
     *     // ... data to create a ProviderFeature
     *   }
     * })
     * 
    **/
    create<T extends ProviderFeatureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderFeatureCreateArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProviderFeatures.
     *     @param {ProviderFeatureCreateManyArgs} args - Arguments to create many ProviderFeatures.
     *     @example
     *     // Create many ProviderFeatures
     *     const providerFeature = await prisma.providerFeature.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProviderFeatureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFeatureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProviderFeature.
     * @param {ProviderFeatureDeleteArgs} args - Arguments to delete one ProviderFeature.
     * @example
     * // Delete one ProviderFeature
     * const ProviderFeature = await prisma.providerFeature.delete({
     *   where: {
     *     // ... filter to delete one ProviderFeature
     *   }
     * })
     * 
    **/
    delete<T extends ProviderFeatureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderFeatureDeleteArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProviderFeature.
     * @param {ProviderFeatureUpdateArgs} args - Arguments to update one ProviderFeature.
     * @example
     * // Update one ProviderFeature
     * const providerFeature = await prisma.providerFeature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProviderFeatureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderFeatureUpdateArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProviderFeatures.
     * @param {ProviderFeatureDeleteManyArgs} args - Arguments to filter ProviderFeatures to delete.
     * @example
     * // Delete a few ProviderFeatures
     * const { count } = await prisma.providerFeature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProviderFeatureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderFeatureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProviderFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFeatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProviderFeatures
     * const providerFeature = await prisma.providerFeature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProviderFeatureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderFeatureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProviderFeature.
     * @param {ProviderFeatureUpsertArgs} args - Arguments to update or create a ProviderFeature.
     * @example
     * // Update or create a ProviderFeature
     * const providerFeature = await prisma.providerFeature.upsert({
     *   create: {
     *     // ... data to create a ProviderFeature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProviderFeature we want to update
     *   }
     * })
    **/
    upsert<T extends ProviderFeatureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderFeatureUpsertArgs<ExtArgs>>
    ): Prisma__ProviderFeatureClient<$Result.GetResult<Prisma.$ProviderFeaturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProviderFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFeatureCountArgs} args - Arguments to filter ProviderFeatures to count.
     * @example
     * // Count the number of ProviderFeatures
     * const count = await prisma.providerFeature.count({
     *   where: {
     *     // ... the filter for the ProviderFeatures we want to count
     *   }
     * })
    **/
    count<T extends ProviderFeatureCountArgs>(
      args?: Subset<T, ProviderFeatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderFeatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProviderFeature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderFeatureAggregateArgs>(args: Subset<T, ProviderFeatureAggregateArgs>): Prisma.PrismaPromise<GetProviderFeatureAggregateType<T>>

    /**
     * Group by ProviderFeature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFeatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderFeatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderFeatureGroupByArgs['orderBy'] }
        : { orderBy?: ProviderFeatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderFeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProviderFeature model
   */
  readonly fields: ProviderFeatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProviderFeature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProviderFeatureClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProviderFeature model
   */ 
  interface ProviderFeatureFieldRefs {
    readonly id: FieldRef<"ProviderFeature", 'Int'>
    readonly providerId: FieldRef<"ProviderFeature", 'Int'>
    readonly featureId: FieldRef<"ProviderFeature", 'String'>
    readonly featureName: FieldRef<"ProviderFeature", 'String'>
    readonly category: FieldRef<"ProviderFeature", 'String'>
    readonly endpoint: FieldRef<"ProviderFeature", 'String'>
    readonly httpMethod: FieldRef<"ProviderFeature", 'String'>
    readonly creditsPerRequest: FieldRef<"ProviderFeature", 'Int'>
    readonly isActive: FieldRef<"ProviderFeature", 'Boolean'>
    readonly parameters: FieldRef<"ProviderFeature", 'Json'>
    readonly description: FieldRef<"ProviderFeature", 'String'>
    readonly createdAt: FieldRef<"ProviderFeature", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ProviderFeature findUnique
   */
  export type ProviderFeatureFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ProviderFeature to fetch.
     */
    where: ProviderFeatureWhereUniqueInput
  }


  /**
   * ProviderFeature findUniqueOrThrow
   */
  export type ProviderFeatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ProviderFeature to fetch.
     */
    where: ProviderFeatureWhereUniqueInput
  }


  /**
   * ProviderFeature findFirst
   */
  export type ProviderFeatureFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ProviderFeature to fetch.
     */
    where?: ProviderFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderFeatures to fetch.
     */
    orderBy?: ProviderFeatureOrderByWithRelationInput | ProviderFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderFeatures.
     */
    cursor?: ProviderFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderFeatures.
     */
    distinct?: ProviderFeatureScalarFieldEnum | ProviderFeatureScalarFieldEnum[]
  }


  /**
   * ProviderFeature findFirstOrThrow
   */
  export type ProviderFeatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ProviderFeature to fetch.
     */
    where?: ProviderFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderFeatures to fetch.
     */
    orderBy?: ProviderFeatureOrderByWithRelationInput | ProviderFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderFeatures.
     */
    cursor?: ProviderFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderFeatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderFeatures.
     */
    distinct?: ProviderFeatureScalarFieldEnum | ProviderFeatureScalarFieldEnum[]
  }


  /**
   * ProviderFeature findMany
   */
  export type ProviderFeatureFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * Filter, which ProviderFeatures to fetch.
     */
    where?: ProviderFeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderFeatures to fetch.
     */
    orderBy?: ProviderFeatureOrderByWithRelationInput | ProviderFeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProviderFeatures.
     */
    cursor?: ProviderFeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderFeatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderFeatures.
     */
    skip?: number
    distinct?: ProviderFeatureScalarFieldEnum | ProviderFeatureScalarFieldEnum[]
  }


  /**
   * ProviderFeature create
   */
  export type ProviderFeatureCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * The data needed to create a ProviderFeature.
     */
    data: XOR<ProviderFeatureCreateInput, ProviderFeatureUncheckedCreateInput>
  }


  /**
   * ProviderFeature createMany
   */
  export type ProviderFeatureCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProviderFeatures.
     */
    data: ProviderFeatureCreateManyInput | ProviderFeatureCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProviderFeature update
   */
  export type ProviderFeatureUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * The data needed to update a ProviderFeature.
     */
    data: XOR<ProviderFeatureUpdateInput, ProviderFeatureUncheckedUpdateInput>
    /**
     * Choose, which ProviderFeature to update.
     */
    where: ProviderFeatureWhereUniqueInput
  }


  /**
   * ProviderFeature updateMany
   */
  export type ProviderFeatureUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProviderFeatures.
     */
    data: XOR<ProviderFeatureUpdateManyMutationInput, ProviderFeatureUncheckedUpdateManyInput>
    /**
     * Filter which ProviderFeatures to update
     */
    where?: ProviderFeatureWhereInput
  }


  /**
   * ProviderFeature upsert
   */
  export type ProviderFeatureUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * The filter to search for the ProviderFeature to update in case it exists.
     */
    where: ProviderFeatureWhereUniqueInput
    /**
     * In case the ProviderFeature found by the `where` argument doesn't exist, create a new ProviderFeature with this data.
     */
    create: XOR<ProviderFeatureCreateInput, ProviderFeatureUncheckedCreateInput>
    /**
     * In case the ProviderFeature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderFeatureUpdateInput, ProviderFeatureUncheckedUpdateInput>
  }


  /**
   * ProviderFeature delete
   */
  export type ProviderFeatureDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
    /**
     * Filter which ProviderFeature to delete.
     */
    where: ProviderFeatureWhereUniqueInput
  }


  /**
   * ProviderFeature deleteMany
   */
  export type ProviderFeatureDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderFeatures to delete
     */
    where?: ProviderFeatureWhereInput
  }


  /**
   * ProviderFeature without action
   */
  export type ProviderFeatureDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderFeature
     */
    select?: ProviderFeatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderFeatureInclude<ExtArgs> | null
  }



  /**
   * Model EnrichmentJob
   */

  export type AggregateEnrichmentJob = {
    _count: EnrichmentJobCountAggregateOutputType | null
    _avg: EnrichmentJobAvgAggregateOutputType | null
    _sum: EnrichmentJobSumAggregateOutputType | null
    _min: EnrichmentJobMinAggregateOutputType | null
    _max: EnrichmentJobMaxAggregateOutputType | null
  }

  export type EnrichmentJobAvgAggregateOutputType = {
    providerId: number | null
    totalRecords: number | null
    processedRecords: number | null
    successfulRecords: number | null
    failedRecords: number | null
    creditsUsed: number | null
  }

  export type EnrichmentJobSumAggregateOutputType = {
    providerId: number | null
    totalRecords: number | null
    processedRecords: number | null
    successfulRecords: number | null
    failedRecords: number | null
    creditsUsed: number | null
  }

  export type EnrichmentJobMinAggregateOutputType = {
    id: string | null
    providerId: number | null
    jobType: string | null
    status: string | null
    totalRecords: number | null
    processedRecords: number | null
    successfulRecords: number | null
    failedRecords: number | null
    creditsUsed: number | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrichmentJobMaxAggregateOutputType = {
    id: string | null
    providerId: number | null
    jobType: string | null
    status: string | null
    totalRecords: number | null
    processedRecords: number | null
    successfulRecords: number | null
    failedRecords: number | null
    creditsUsed: number | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrichmentJobCountAggregateOutputType = {
    id: number
    providerId: number
    jobType: number
    status: number
    totalRecords: number
    processedRecords: number
    successfulRecords: number
    failedRecords: number
    inputData: number
    outputData: number
    configuration: number
    creditsUsed: number
    errorDetails: number
    startedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EnrichmentJobAvgAggregateInputType = {
    providerId?: true
    totalRecords?: true
    processedRecords?: true
    successfulRecords?: true
    failedRecords?: true
    creditsUsed?: true
  }

  export type EnrichmentJobSumAggregateInputType = {
    providerId?: true
    totalRecords?: true
    processedRecords?: true
    successfulRecords?: true
    failedRecords?: true
    creditsUsed?: true
  }

  export type EnrichmentJobMinAggregateInputType = {
    id?: true
    providerId?: true
    jobType?: true
    status?: true
    totalRecords?: true
    processedRecords?: true
    successfulRecords?: true
    failedRecords?: true
    creditsUsed?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrichmentJobMaxAggregateInputType = {
    id?: true
    providerId?: true
    jobType?: true
    status?: true
    totalRecords?: true
    processedRecords?: true
    successfulRecords?: true
    failedRecords?: true
    creditsUsed?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrichmentJobCountAggregateInputType = {
    id?: true
    providerId?: true
    jobType?: true
    status?: true
    totalRecords?: true
    processedRecords?: true
    successfulRecords?: true
    failedRecords?: true
    inputData?: true
    outputData?: true
    configuration?: true
    creditsUsed?: true
    errorDetails?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EnrichmentJobAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnrichmentJob to aggregate.
     */
    where?: EnrichmentJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrichmentJobs to fetch.
     */
    orderBy?: EnrichmentJobOrderByWithRelationInput | EnrichmentJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrichmentJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrichmentJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrichmentJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EnrichmentJobs
    **/
    _count?: true | EnrichmentJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrichmentJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrichmentJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrichmentJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrichmentJobMaxAggregateInputType
  }

  export type GetEnrichmentJobAggregateType<T extends EnrichmentJobAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrichmentJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrichmentJob[P]>
      : GetScalarType<T[P], AggregateEnrichmentJob[P]>
  }




  export type EnrichmentJobGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EnrichmentJobWhereInput
    orderBy?: EnrichmentJobOrderByWithAggregationInput | EnrichmentJobOrderByWithAggregationInput[]
    by: EnrichmentJobScalarFieldEnum[] | EnrichmentJobScalarFieldEnum
    having?: EnrichmentJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrichmentJobCountAggregateInputType | true
    _avg?: EnrichmentJobAvgAggregateInputType
    _sum?: EnrichmentJobSumAggregateInputType
    _min?: EnrichmentJobMinAggregateInputType
    _max?: EnrichmentJobMaxAggregateInputType
  }

  export type EnrichmentJobGroupByOutputType = {
    id: string
    providerId: number | null
    jobType: string
    status: string
    totalRecords: number
    processedRecords: number
    successfulRecords: number
    failedRecords: number
    inputData: JsonValue | null
    outputData: JsonValue | null
    configuration: JsonValue | null
    creditsUsed: number
    errorDetails: JsonValue | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: EnrichmentJobCountAggregateOutputType | null
    _avg: EnrichmentJobAvgAggregateOutputType | null
    _sum: EnrichmentJobSumAggregateOutputType | null
    _min: EnrichmentJobMinAggregateOutputType | null
    _max: EnrichmentJobMaxAggregateOutputType | null
  }

  type GetEnrichmentJobGroupByPayload<T extends EnrichmentJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrichmentJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrichmentJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrichmentJobGroupByOutputType[P]>
            : GetScalarType<T[P], EnrichmentJobGroupByOutputType[P]>
        }
      >
    >


  export type EnrichmentJobSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    jobType?: boolean
    status?: boolean
    totalRecords?: boolean
    processedRecords?: boolean
    successfulRecords?: boolean
    failedRecords?: boolean
    inputData?: boolean
    outputData?: boolean
    configuration?: boolean
    creditsUsed?: boolean
    errorDetails?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    provider?: boolean | EnrichmentJob$providerArgs<ExtArgs>
    logs?: boolean | EnrichmentJob$logsArgs<ExtArgs>
    _count?: boolean | EnrichmentJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrichmentJob"]>

  export type EnrichmentJobSelectScalar = {
    id?: boolean
    providerId?: boolean
    jobType?: boolean
    status?: boolean
    totalRecords?: boolean
    processedRecords?: boolean
    successfulRecords?: boolean
    failedRecords?: boolean
    inputData?: boolean
    outputData?: boolean
    configuration?: boolean
    creditsUsed?: boolean
    errorDetails?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EnrichmentJobInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    provider?: boolean | EnrichmentJob$providerArgs<ExtArgs>
    logs?: boolean | EnrichmentJob$logsArgs<ExtArgs>
    _count?: boolean | EnrichmentJobCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EnrichmentJobPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "EnrichmentJob"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs> | null
      logs: Prisma.$JobLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      providerId: number | null
      jobType: string
      status: string
      totalRecords: number
      processedRecords: number
      successfulRecords: number
      failedRecords: number
      inputData: Prisma.JsonValue | null
      outputData: Prisma.JsonValue | null
      configuration: Prisma.JsonValue | null
      creditsUsed: number
      errorDetails: Prisma.JsonValue | null
      startedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["enrichmentJob"]>
    composites: {}
  }


  type EnrichmentJobGetPayload<S extends boolean | null | undefined | EnrichmentJobDefaultArgs> = $Result.GetResult<Prisma.$EnrichmentJobPayload, S>

  type EnrichmentJobCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EnrichmentJobFindManyArgs, 'select' | 'include'> & {
      select?: EnrichmentJobCountAggregateInputType | true
    }

  export interface EnrichmentJobDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EnrichmentJob'], meta: { name: 'EnrichmentJob' } }
    /**
     * Find zero or one EnrichmentJob that matches the filter.
     * @param {EnrichmentJobFindUniqueArgs} args - Arguments to find a EnrichmentJob
     * @example
     * // Get one EnrichmentJob
     * const enrichmentJob = await prisma.enrichmentJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnrichmentJobFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EnrichmentJobFindUniqueArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EnrichmentJob that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnrichmentJobFindUniqueOrThrowArgs} args - Arguments to find a EnrichmentJob
     * @example
     * // Get one EnrichmentJob
     * const enrichmentJob = await prisma.enrichmentJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnrichmentJobFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrichmentJobFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EnrichmentJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrichmentJobFindFirstArgs} args - Arguments to find a EnrichmentJob
     * @example
     * // Get one EnrichmentJob
     * const enrichmentJob = await prisma.enrichmentJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnrichmentJobFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrichmentJobFindFirstArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EnrichmentJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrichmentJobFindFirstOrThrowArgs} args - Arguments to find a EnrichmentJob
     * @example
     * // Get one EnrichmentJob
     * const enrichmentJob = await prisma.enrichmentJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnrichmentJobFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrichmentJobFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EnrichmentJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrichmentJobFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EnrichmentJobs
     * const enrichmentJobs = await prisma.enrichmentJob.findMany()
     * 
     * // Get first 10 EnrichmentJobs
     * const enrichmentJobs = await prisma.enrichmentJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrichmentJobWithIdOnly = await prisma.enrichmentJob.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EnrichmentJobFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrichmentJobFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EnrichmentJob.
     * @param {EnrichmentJobCreateArgs} args - Arguments to create a EnrichmentJob.
     * @example
     * // Create one EnrichmentJob
     * const EnrichmentJob = await prisma.enrichmentJob.create({
     *   data: {
     *     // ... data to create a EnrichmentJob
     *   }
     * })
     * 
    **/
    create<T extends EnrichmentJobCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EnrichmentJobCreateArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EnrichmentJobs.
     *     @param {EnrichmentJobCreateManyArgs} args - Arguments to create many EnrichmentJobs.
     *     @example
     *     // Create many EnrichmentJobs
     *     const enrichmentJob = await prisma.enrichmentJob.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnrichmentJobCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrichmentJobCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EnrichmentJob.
     * @param {EnrichmentJobDeleteArgs} args - Arguments to delete one EnrichmentJob.
     * @example
     * // Delete one EnrichmentJob
     * const EnrichmentJob = await prisma.enrichmentJob.delete({
     *   where: {
     *     // ... filter to delete one EnrichmentJob
     *   }
     * })
     * 
    **/
    delete<T extends EnrichmentJobDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EnrichmentJobDeleteArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EnrichmentJob.
     * @param {EnrichmentJobUpdateArgs} args - Arguments to update one EnrichmentJob.
     * @example
     * // Update one EnrichmentJob
     * const enrichmentJob = await prisma.enrichmentJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnrichmentJobUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EnrichmentJobUpdateArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EnrichmentJobs.
     * @param {EnrichmentJobDeleteManyArgs} args - Arguments to filter EnrichmentJobs to delete.
     * @example
     * // Delete a few EnrichmentJobs
     * const { count } = await prisma.enrichmentJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnrichmentJobDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnrichmentJobDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EnrichmentJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrichmentJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EnrichmentJobs
     * const enrichmentJob = await prisma.enrichmentJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnrichmentJobUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EnrichmentJobUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EnrichmentJob.
     * @param {EnrichmentJobUpsertArgs} args - Arguments to update or create a EnrichmentJob.
     * @example
     * // Update or create a EnrichmentJob
     * const enrichmentJob = await prisma.enrichmentJob.upsert({
     *   create: {
     *     // ... data to create a EnrichmentJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EnrichmentJob we want to update
     *   }
     * })
    **/
    upsert<T extends EnrichmentJobUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EnrichmentJobUpsertArgs<ExtArgs>>
    ): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EnrichmentJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrichmentJobCountArgs} args - Arguments to filter EnrichmentJobs to count.
     * @example
     * // Count the number of EnrichmentJobs
     * const count = await prisma.enrichmentJob.count({
     *   where: {
     *     // ... the filter for the EnrichmentJobs we want to count
     *   }
     * })
    **/
    count<T extends EnrichmentJobCountArgs>(
      args?: Subset<T, EnrichmentJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrichmentJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EnrichmentJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrichmentJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrichmentJobAggregateArgs>(args: Subset<T, EnrichmentJobAggregateArgs>): Prisma.PrismaPromise<GetEnrichmentJobAggregateType<T>>

    /**
     * Group by EnrichmentJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrichmentJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrichmentJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrichmentJobGroupByArgs['orderBy'] }
        : { orderBy?: EnrichmentJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrichmentJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrichmentJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EnrichmentJob model
   */
  readonly fields: EnrichmentJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EnrichmentJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrichmentJobClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    provider<T extends EnrichmentJob$providerArgs<ExtArgs> = {}>(args?: Subset<T, EnrichmentJob$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    logs<T extends EnrichmentJob$logsArgs<ExtArgs> = {}>(args?: Subset<T, EnrichmentJob$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EnrichmentJob model
   */ 
  interface EnrichmentJobFieldRefs {
    readonly id: FieldRef<"EnrichmentJob", 'String'>
    readonly providerId: FieldRef<"EnrichmentJob", 'Int'>
    readonly jobType: FieldRef<"EnrichmentJob", 'String'>
    readonly status: FieldRef<"EnrichmentJob", 'String'>
    readonly totalRecords: FieldRef<"EnrichmentJob", 'Int'>
    readonly processedRecords: FieldRef<"EnrichmentJob", 'Int'>
    readonly successfulRecords: FieldRef<"EnrichmentJob", 'Int'>
    readonly failedRecords: FieldRef<"EnrichmentJob", 'Int'>
    readonly inputData: FieldRef<"EnrichmentJob", 'Json'>
    readonly outputData: FieldRef<"EnrichmentJob", 'Json'>
    readonly configuration: FieldRef<"EnrichmentJob", 'Json'>
    readonly creditsUsed: FieldRef<"EnrichmentJob", 'Int'>
    readonly errorDetails: FieldRef<"EnrichmentJob", 'Json'>
    readonly startedAt: FieldRef<"EnrichmentJob", 'DateTime'>
    readonly completedAt: FieldRef<"EnrichmentJob", 'DateTime'>
    readonly createdAt: FieldRef<"EnrichmentJob", 'DateTime'>
    readonly updatedAt: FieldRef<"EnrichmentJob", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * EnrichmentJob findUnique
   */
  export type EnrichmentJobFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * Filter, which EnrichmentJob to fetch.
     */
    where: EnrichmentJobWhereUniqueInput
  }


  /**
   * EnrichmentJob findUniqueOrThrow
   */
  export type EnrichmentJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * Filter, which EnrichmentJob to fetch.
     */
    where: EnrichmentJobWhereUniqueInput
  }


  /**
   * EnrichmentJob findFirst
   */
  export type EnrichmentJobFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * Filter, which EnrichmentJob to fetch.
     */
    where?: EnrichmentJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrichmentJobs to fetch.
     */
    orderBy?: EnrichmentJobOrderByWithRelationInput | EnrichmentJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnrichmentJobs.
     */
    cursor?: EnrichmentJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrichmentJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrichmentJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnrichmentJobs.
     */
    distinct?: EnrichmentJobScalarFieldEnum | EnrichmentJobScalarFieldEnum[]
  }


  /**
   * EnrichmentJob findFirstOrThrow
   */
  export type EnrichmentJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * Filter, which EnrichmentJob to fetch.
     */
    where?: EnrichmentJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrichmentJobs to fetch.
     */
    orderBy?: EnrichmentJobOrderByWithRelationInput | EnrichmentJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnrichmentJobs.
     */
    cursor?: EnrichmentJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrichmentJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrichmentJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnrichmentJobs.
     */
    distinct?: EnrichmentJobScalarFieldEnum | EnrichmentJobScalarFieldEnum[]
  }


  /**
   * EnrichmentJob findMany
   */
  export type EnrichmentJobFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * Filter, which EnrichmentJobs to fetch.
     */
    where?: EnrichmentJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnrichmentJobs to fetch.
     */
    orderBy?: EnrichmentJobOrderByWithRelationInput | EnrichmentJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EnrichmentJobs.
     */
    cursor?: EnrichmentJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnrichmentJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnrichmentJobs.
     */
    skip?: number
    distinct?: EnrichmentJobScalarFieldEnum | EnrichmentJobScalarFieldEnum[]
  }


  /**
   * EnrichmentJob create
   */
  export type EnrichmentJobCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * The data needed to create a EnrichmentJob.
     */
    data: XOR<EnrichmentJobCreateInput, EnrichmentJobUncheckedCreateInput>
  }


  /**
   * EnrichmentJob createMany
   */
  export type EnrichmentJobCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EnrichmentJobs.
     */
    data: EnrichmentJobCreateManyInput | EnrichmentJobCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EnrichmentJob update
   */
  export type EnrichmentJobUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * The data needed to update a EnrichmentJob.
     */
    data: XOR<EnrichmentJobUpdateInput, EnrichmentJobUncheckedUpdateInput>
    /**
     * Choose, which EnrichmentJob to update.
     */
    where: EnrichmentJobWhereUniqueInput
  }


  /**
   * EnrichmentJob updateMany
   */
  export type EnrichmentJobUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EnrichmentJobs.
     */
    data: XOR<EnrichmentJobUpdateManyMutationInput, EnrichmentJobUncheckedUpdateManyInput>
    /**
     * Filter which EnrichmentJobs to update
     */
    where?: EnrichmentJobWhereInput
  }


  /**
   * EnrichmentJob upsert
   */
  export type EnrichmentJobUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * The filter to search for the EnrichmentJob to update in case it exists.
     */
    where: EnrichmentJobWhereUniqueInput
    /**
     * In case the EnrichmentJob found by the `where` argument doesn't exist, create a new EnrichmentJob with this data.
     */
    create: XOR<EnrichmentJobCreateInput, EnrichmentJobUncheckedCreateInput>
    /**
     * In case the EnrichmentJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrichmentJobUpdateInput, EnrichmentJobUncheckedUpdateInput>
  }


  /**
   * EnrichmentJob delete
   */
  export type EnrichmentJobDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
    /**
     * Filter which EnrichmentJob to delete.
     */
    where: EnrichmentJobWhereUniqueInput
  }


  /**
   * EnrichmentJob deleteMany
   */
  export type EnrichmentJobDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnrichmentJobs to delete
     */
    where?: EnrichmentJobWhereInput
  }


  /**
   * EnrichmentJob.provider
   */
  export type EnrichmentJob$providerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }


  /**
   * EnrichmentJob.logs
   */
  export type EnrichmentJob$logsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    where?: JobLogWhereInput
    orderBy?: JobLogOrderByWithRelationInput | JobLogOrderByWithRelationInput[]
    cursor?: JobLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobLogScalarFieldEnum | JobLogScalarFieldEnum[]
  }


  /**
   * EnrichmentJob without action
   */
  export type EnrichmentJobDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnrichmentJob
     */
    select?: EnrichmentJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnrichmentJobInclude<ExtArgs> | null
  }



  /**
   * Model JobLog
   */

  export type AggregateJobLog = {
    _count: JobLogCountAggregateOutputType | null
    _avg: JobLogAvgAggregateOutputType | null
    _sum: JobLogSumAggregateOutputType | null
    _min: JobLogMinAggregateOutputType | null
    _max: JobLogMaxAggregateOutputType | null
  }

  export type JobLogAvgAggregateOutputType = {
    id: number | null
  }

  export type JobLogSumAggregateOutputType = {
    id: number | null
  }

  export type JobLogMinAggregateOutputType = {
    id: number | null
    jobId: string | null
    level: string | null
    message: string | null
    timestamp: Date | null
  }

  export type JobLogMaxAggregateOutputType = {
    id: number | null
    jobId: string | null
    level: string | null
    message: string | null
    timestamp: Date | null
  }

  export type JobLogCountAggregateOutputType = {
    id: number
    jobId: number
    level: number
    message: number
    details: number
    timestamp: number
    _all: number
  }


  export type JobLogAvgAggregateInputType = {
    id?: true
  }

  export type JobLogSumAggregateInputType = {
    id?: true
  }

  export type JobLogMinAggregateInputType = {
    id?: true
    jobId?: true
    level?: true
    message?: true
    timestamp?: true
  }

  export type JobLogMaxAggregateInputType = {
    id?: true
    jobId?: true
    level?: true
    message?: true
    timestamp?: true
  }

  export type JobLogCountAggregateInputType = {
    id?: true
    jobId?: true
    level?: true
    message?: true
    details?: true
    timestamp?: true
    _all?: true
  }

  export type JobLogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobLog to aggregate.
     */
    where?: JobLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLogs to fetch.
     */
    orderBy?: JobLogOrderByWithRelationInput | JobLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobLogs
    **/
    _count?: true | JobLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobLogMaxAggregateInputType
  }

  export type GetJobLogAggregateType<T extends JobLogAggregateArgs> = {
        [P in keyof T & keyof AggregateJobLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobLog[P]>
      : GetScalarType<T[P], AggregateJobLog[P]>
  }




  export type JobLogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: JobLogWhereInput
    orderBy?: JobLogOrderByWithAggregationInput | JobLogOrderByWithAggregationInput[]
    by: JobLogScalarFieldEnum[] | JobLogScalarFieldEnum
    having?: JobLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobLogCountAggregateInputType | true
    _avg?: JobLogAvgAggregateInputType
    _sum?: JobLogSumAggregateInputType
    _min?: JobLogMinAggregateInputType
    _max?: JobLogMaxAggregateInputType
  }

  export type JobLogGroupByOutputType = {
    id: number
    jobId: string
    level: string
    message: string
    details: JsonValue | null
    timestamp: Date
    _count: JobLogCountAggregateOutputType | null
    _avg: JobLogAvgAggregateOutputType | null
    _sum: JobLogSumAggregateOutputType | null
    _min: JobLogMinAggregateOutputType | null
    _max: JobLogMaxAggregateOutputType | null
  }

  type GetJobLogGroupByPayload<T extends JobLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobLogGroupByOutputType[P]>
            : GetScalarType<T[P], JobLogGroupByOutputType[P]>
        }
      >
    >


  export type JobLogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    level?: boolean
    message?: boolean
    details?: boolean
    timestamp?: boolean
    job?: boolean | EnrichmentJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobLog"]>

  export type JobLogSelectScalar = {
    id?: boolean
    jobId?: boolean
    level?: boolean
    message?: boolean
    details?: boolean
    timestamp?: boolean
  }

  export type JobLogInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    job?: boolean | EnrichmentJobDefaultArgs<ExtArgs>
  }


  export type $JobLogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "JobLog"
    objects: {
      job: Prisma.$EnrichmentJobPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      jobId: string
      level: string
      message: string
      details: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["jobLog"]>
    composites: {}
  }


  type JobLogGetPayload<S extends boolean | null | undefined | JobLogDefaultArgs> = $Result.GetResult<Prisma.$JobLogPayload, S>

  type JobLogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<JobLogFindManyArgs, 'select' | 'include'> & {
      select?: JobLogCountAggregateInputType | true
    }

  export interface JobLogDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobLog'], meta: { name: 'JobLog' } }
    /**
     * Find zero or one JobLog that matches the filter.
     * @param {JobLogFindUniqueArgs} args - Arguments to find a JobLog
     * @example
     * // Get one JobLog
     * const jobLog = await prisma.jobLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobLogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JobLogFindUniqueArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one JobLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JobLogFindUniqueOrThrowArgs} args - Arguments to find a JobLog
     * @example
     * // Get one JobLog
     * const jobLog = await prisma.jobLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JobLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first JobLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLogFindFirstArgs} args - Arguments to find a JobLog
     * @example
     * // Get one JobLog
     * const jobLog = await prisma.jobLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobLogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JobLogFindFirstArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first JobLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLogFindFirstOrThrowArgs} args - Arguments to find a JobLog
     * @example
     * // Get one JobLog
     * const jobLog = await prisma.jobLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JobLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JobLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more JobLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobLogs
     * const jobLogs = await prisma.jobLog.findMany()
     * 
     * // Get first 10 JobLogs
     * const jobLogs = await prisma.jobLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobLogWithIdOnly = await prisma.jobLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JobLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a JobLog.
     * @param {JobLogCreateArgs} args - Arguments to create a JobLog.
     * @example
     * // Create one JobLog
     * const JobLog = await prisma.jobLog.create({
     *   data: {
     *     // ... data to create a JobLog
     *   }
     * })
     * 
    **/
    create<T extends JobLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JobLogCreateArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many JobLogs.
     *     @param {JobLogCreateManyArgs} args - Arguments to create many JobLogs.
     *     @example
     *     // Create many JobLogs
     *     const jobLog = await prisma.jobLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JobLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobLog.
     * @param {JobLogDeleteArgs} args - Arguments to delete one JobLog.
     * @example
     * // Delete one JobLog
     * const JobLog = await prisma.jobLog.delete({
     *   where: {
     *     // ... filter to delete one JobLog
     *   }
     * })
     * 
    **/
    delete<T extends JobLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JobLogDeleteArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one JobLog.
     * @param {JobLogUpdateArgs} args - Arguments to update one JobLog.
     * @example
     * // Update one JobLog
     * const jobLog = await prisma.jobLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JobLogUpdateArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more JobLogs.
     * @param {JobLogDeleteManyArgs} args - Arguments to filter JobLogs to delete.
     * @example
     * // Delete a few JobLogs
     * const { count } = await prisma.jobLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JobLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobLogs
     * const jobLog = await prisma.jobLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JobLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobLog.
     * @param {JobLogUpsertArgs} args - Arguments to update or create a JobLog.
     * @example
     * // Update or create a JobLog
     * const jobLog = await prisma.jobLog.upsert({
     *   create: {
     *     // ... data to create a JobLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobLog we want to update
     *   }
     * })
    **/
    upsert<T extends JobLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JobLogUpsertArgs<ExtArgs>>
    ): Prisma__JobLogClient<$Result.GetResult<Prisma.$JobLogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of JobLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLogCountArgs} args - Arguments to filter JobLogs to count.
     * @example
     * // Count the number of JobLogs
     * const count = await prisma.jobLog.count({
     *   where: {
     *     // ... the filter for the JobLogs we want to count
     *   }
     * })
    **/
    count<T extends JobLogCountArgs>(
      args?: Subset<T, JobLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobLogAggregateArgs>(args: Subset<T, JobLogAggregateArgs>): Prisma.PrismaPromise<GetJobLogAggregateType<T>>

    /**
     * Group by JobLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobLogGroupByArgs['orderBy'] }
        : { orderBy?: JobLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobLog model
   */
  readonly fields: JobLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobLogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    job<T extends EnrichmentJobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EnrichmentJobDefaultArgs<ExtArgs>>): Prisma__EnrichmentJobClient<$Result.GetResult<Prisma.$EnrichmentJobPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the JobLog model
   */ 
  interface JobLogFieldRefs {
    readonly id: FieldRef<"JobLog", 'Int'>
    readonly jobId: FieldRef<"JobLog", 'String'>
    readonly level: FieldRef<"JobLog", 'String'>
    readonly message: FieldRef<"JobLog", 'String'>
    readonly details: FieldRef<"JobLog", 'Json'>
    readonly timestamp: FieldRef<"JobLog", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * JobLog findUnique
   */
  export type JobLogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * Filter, which JobLog to fetch.
     */
    where: JobLogWhereUniqueInput
  }


  /**
   * JobLog findUniqueOrThrow
   */
  export type JobLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * Filter, which JobLog to fetch.
     */
    where: JobLogWhereUniqueInput
  }


  /**
   * JobLog findFirst
   */
  export type JobLogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * Filter, which JobLog to fetch.
     */
    where?: JobLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLogs to fetch.
     */
    orderBy?: JobLogOrderByWithRelationInput | JobLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobLogs.
     */
    cursor?: JobLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobLogs.
     */
    distinct?: JobLogScalarFieldEnum | JobLogScalarFieldEnum[]
  }


  /**
   * JobLog findFirstOrThrow
   */
  export type JobLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * Filter, which JobLog to fetch.
     */
    where?: JobLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLogs to fetch.
     */
    orderBy?: JobLogOrderByWithRelationInput | JobLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobLogs.
     */
    cursor?: JobLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobLogs.
     */
    distinct?: JobLogScalarFieldEnum | JobLogScalarFieldEnum[]
  }


  /**
   * JobLog findMany
   */
  export type JobLogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * Filter, which JobLogs to fetch.
     */
    where?: JobLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLogs to fetch.
     */
    orderBy?: JobLogOrderByWithRelationInput | JobLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobLogs.
     */
    cursor?: JobLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLogs.
     */
    skip?: number
    distinct?: JobLogScalarFieldEnum | JobLogScalarFieldEnum[]
  }


  /**
   * JobLog create
   */
  export type JobLogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * The data needed to create a JobLog.
     */
    data: XOR<JobLogCreateInput, JobLogUncheckedCreateInput>
  }


  /**
   * JobLog createMany
   */
  export type JobLogCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobLogs.
     */
    data: JobLogCreateManyInput | JobLogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * JobLog update
   */
  export type JobLogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * The data needed to update a JobLog.
     */
    data: XOR<JobLogUpdateInput, JobLogUncheckedUpdateInput>
    /**
     * Choose, which JobLog to update.
     */
    where: JobLogWhereUniqueInput
  }


  /**
   * JobLog updateMany
   */
  export type JobLogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobLogs.
     */
    data: XOR<JobLogUpdateManyMutationInput, JobLogUncheckedUpdateManyInput>
    /**
     * Filter which JobLogs to update
     */
    where?: JobLogWhereInput
  }


  /**
   * JobLog upsert
   */
  export type JobLogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * The filter to search for the JobLog to update in case it exists.
     */
    where: JobLogWhereUniqueInput
    /**
     * In case the JobLog found by the `where` argument doesn't exist, create a new JobLog with this data.
     */
    create: XOR<JobLogCreateInput, JobLogUncheckedCreateInput>
    /**
     * In case the JobLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobLogUpdateInput, JobLogUncheckedUpdateInput>
  }


  /**
   * JobLog delete
   */
  export type JobLogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
    /**
     * Filter which JobLog to delete.
     */
    where: JobLogWhereUniqueInput
  }


  /**
   * JobLog deleteMany
   */
  export type JobLogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobLogs to delete
     */
    where?: JobLogWhereInput
  }


  /**
   * JobLog without action
   */
  export type JobLogDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLog
     */
    select?: JobLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobLogInclude<ExtArgs> | null
  }



  /**
   * Model ApiUsage
   */

  export type AggregateApiUsage = {
    _count: ApiUsageCountAggregateOutputType | null
    _avg: ApiUsageAvgAggregateOutputType | null
    _sum: ApiUsageSumAggregateOutputType | null
    _min: ApiUsageMinAggregateOutputType | null
    _max: ApiUsageMaxAggregateOutputType | null
  }

  export type ApiUsageAvgAggregateOutputType = {
    id: number | null
    providerId: number | null
    statusCode: number | null
    creditsUsed: number | null
    responseTime: number | null
  }

  export type ApiUsageSumAggregateOutputType = {
    id: number | null
    providerId: number | null
    statusCode: number | null
    creditsUsed: number | null
    responseTime: number | null
  }

  export type ApiUsageMinAggregateOutputType = {
    id: number | null
    providerId: number | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    creditsUsed: number | null
    responseTime: number | null
    timestamp: Date | null
  }

  export type ApiUsageMaxAggregateOutputType = {
    id: number | null
    providerId: number | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    creditsUsed: number | null
    responseTime: number | null
    timestamp: Date | null
  }

  export type ApiUsageCountAggregateOutputType = {
    id: number
    providerId: number
    endpoint: number
    method: number
    statusCode: number
    creditsUsed: number
    responseTime: number
    timestamp: number
    _all: number
  }


  export type ApiUsageAvgAggregateInputType = {
    id?: true
    providerId?: true
    statusCode?: true
    creditsUsed?: true
    responseTime?: true
  }

  export type ApiUsageSumAggregateInputType = {
    id?: true
    providerId?: true
    statusCode?: true
    creditsUsed?: true
    responseTime?: true
  }

  export type ApiUsageMinAggregateInputType = {
    id?: true
    providerId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    creditsUsed?: true
    responseTime?: true
    timestamp?: true
  }

  export type ApiUsageMaxAggregateInputType = {
    id?: true
    providerId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    creditsUsed?: true
    responseTime?: true
    timestamp?: true
  }

  export type ApiUsageCountAggregateInputType = {
    id?: true
    providerId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    creditsUsed?: true
    responseTime?: true
    timestamp?: true
    _all?: true
  }

  export type ApiUsageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiUsage to aggregate.
     */
    where?: ApiUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiUsages to fetch.
     */
    orderBy?: ApiUsageOrderByWithRelationInput | ApiUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiUsages
    **/
    _count?: true | ApiUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiUsageMaxAggregateInputType
  }

  export type GetApiUsageAggregateType<T extends ApiUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateApiUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiUsage[P]>
      : GetScalarType<T[P], AggregateApiUsage[P]>
  }




  export type ApiUsageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ApiUsageWhereInput
    orderBy?: ApiUsageOrderByWithAggregationInput | ApiUsageOrderByWithAggregationInput[]
    by: ApiUsageScalarFieldEnum[] | ApiUsageScalarFieldEnum
    having?: ApiUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiUsageCountAggregateInputType | true
    _avg?: ApiUsageAvgAggregateInputType
    _sum?: ApiUsageSumAggregateInputType
    _min?: ApiUsageMinAggregateInputType
    _max?: ApiUsageMaxAggregateInputType
  }

  export type ApiUsageGroupByOutputType = {
    id: number
    providerId: number
    endpoint: string
    method: string
    statusCode: number
    creditsUsed: number
    responseTime: number
    timestamp: Date
    _count: ApiUsageCountAggregateOutputType | null
    _avg: ApiUsageAvgAggregateOutputType | null
    _sum: ApiUsageSumAggregateOutputType | null
    _min: ApiUsageMinAggregateOutputType | null
    _max: ApiUsageMaxAggregateOutputType | null
  }

  type GetApiUsageGroupByPayload<T extends ApiUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiUsageGroupByOutputType[P]>
            : GetScalarType<T[P], ApiUsageGroupByOutputType[P]>
        }
      >
    >


  export type ApiUsageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    creditsUsed?: boolean
    responseTime?: boolean
    timestamp?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiUsage"]>

  export type ApiUsageSelectScalar = {
    id?: boolean
    providerId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    creditsUsed?: boolean
    responseTime?: boolean
    timestamp?: boolean
  }

  export type ApiUsageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }


  export type $ApiUsagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ApiUsage"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      providerId: number
      endpoint: string
      method: string
      statusCode: number
      creditsUsed: number
      responseTime: number
      timestamp: Date
    }, ExtArgs["result"]["apiUsage"]>
    composites: {}
  }


  type ApiUsageGetPayload<S extends boolean | null | undefined | ApiUsageDefaultArgs> = $Result.GetResult<Prisma.$ApiUsagePayload, S>

  type ApiUsageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ApiUsageFindManyArgs, 'select' | 'include'> & {
      select?: ApiUsageCountAggregateInputType | true
    }

  export interface ApiUsageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiUsage'], meta: { name: 'ApiUsage' } }
    /**
     * Find zero or one ApiUsage that matches the filter.
     * @param {ApiUsageFindUniqueArgs} args - Arguments to find a ApiUsage
     * @example
     * // Get one ApiUsage
     * const apiUsage = await prisma.apiUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApiUsageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ApiUsageFindUniqueArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ApiUsage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApiUsageFindUniqueOrThrowArgs} args - Arguments to find a ApiUsage
     * @example
     * // Get one ApiUsage
     * const apiUsage = await prisma.apiUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApiUsageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiUsageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ApiUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiUsageFindFirstArgs} args - Arguments to find a ApiUsage
     * @example
     * // Get one ApiUsage
     * const apiUsage = await prisma.apiUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApiUsageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiUsageFindFirstArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ApiUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiUsageFindFirstOrThrowArgs} args - Arguments to find a ApiUsage
     * @example
     * // Get one ApiUsage
     * const apiUsage = await prisma.apiUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApiUsageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiUsageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ApiUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiUsageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiUsages
     * const apiUsages = await prisma.apiUsage.findMany()
     * 
     * // Get first 10 ApiUsages
     * const apiUsages = await prisma.apiUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiUsageWithIdOnly = await prisma.apiUsage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApiUsageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiUsageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ApiUsage.
     * @param {ApiUsageCreateArgs} args - Arguments to create a ApiUsage.
     * @example
     * // Create one ApiUsage
     * const ApiUsage = await prisma.apiUsage.create({
     *   data: {
     *     // ... data to create a ApiUsage
     *   }
     * })
     * 
    **/
    create<T extends ApiUsageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ApiUsageCreateArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ApiUsages.
     *     @param {ApiUsageCreateManyArgs} args - Arguments to create many ApiUsages.
     *     @example
     *     // Create many ApiUsages
     *     const apiUsage = await prisma.apiUsage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApiUsageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiUsageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ApiUsage.
     * @param {ApiUsageDeleteArgs} args - Arguments to delete one ApiUsage.
     * @example
     * // Delete one ApiUsage
     * const ApiUsage = await prisma.apiUsage.delete({
     *   where: {
     *     // ... filter to delete one ApiUsage
     *   }
     * })
     * 
    **/
    delete<T extends ApiUsageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ApiUsageDeleteArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ApiUsage.
     * @param {ApiUsageUpdateArgs} args - Arguments to update one ApiUsage.
     * @example
     * // Update one ApiUsage
     * const apiUsage = await prisma.apiUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApiUsageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ApiUsageUpdateArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ApiUsages.
     * @param {ApiUsageDeleteManyArgs} args - Arguments to filter ApiUsages to delete.
     * @example
     * // Delete a few ApiUsages
     * const { count } = await prisma.apiUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApiUsageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApiUsageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiUsages
     * const apiUsage = await prisma.apiUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApiUsageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ApiUsageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiUsage.
     * @param {ApiUsageUpsertArgs} args - Arguments to update or create a ApiUsage.
     * @example
     * // Update or create a ApiUsage
     * const apiUsage = await prisma.apiUsage.upsert({
     *   create: {
     *     // ... data to create a ApiUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiUsage we want to update
     *   }
     * })
    **/
    upsert<T extends ApiUsageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ApiUsageUpsertArgs<ExtArgs>>
    ): Prisma__ApiUsageClient<$Result.GetResult<Prisma.$ApiUsagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ApiUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiUsageCountArgs} args - Arguments to filter ApiUsages to count.
     * @example
     * // Count the number of ApiUsages
     * const count = await prisma.apiUsage.count({
     *   where: {
     *     // ... the filter for the ApiUsages we want to count
     *   }
     * })
    **/
    count<T extends ApiUsageCountArgs>(
      args?: Subset<T, ApiUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiUsageAggregateArgs>(args: Subset<T, ApiUsageAggregateArgs>): Prisma.PrismaPromise<GetApiUsageAggregateType<T>>

    /**
     * Group by ApiUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiUsageGroupByArgs['orderBy'] }
        : { orderBy?: ApiUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiUsage model
   */
  readonly fields: ApiUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiUsageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ApiUsage model
   */ 
  interface ApiUsageFieldRefs {
    readonly id: FieldRef<"ApiUsage", 'Int'>
    readonly providerId: FieldRef<"ApiUsage", 'Int'>
    readonly endpoint: FieldRef<"ApiUsage", 'String'>
    readonly method: FieldRef<"ApiUsage", 'String'>
    readonly statusCode: FieldRef<"ApiUsage", 'Int'>
    readonly creditsUsed: FieldRef<"ApiUsage", 'Int'>
    readonly responseTime: FieldRef<"ApiUsage", 'Int'>
    readonly timestamp: FieldRef<"ApiUsage", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ApiUsage findUnique
   */
  export type ApiUsageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiUsage to fetch.
     */
    where: ApiUsageWhereUniqueInput
  }


  /**
   * ApiUsage findUniqueOrThrow
   */
  export type ApiUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiUsage to fetch.
     */
    where: ApiUsageWhereUniqueInput
  }


  /**
   * ApiUsage findFirst
   */
  export type ApiUsageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiUsage to fetch.
     */
    where?: ApiUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiUsages to fetch.
     */
    orderBy?: ApiUsageOrderByWithRelationInput | ApiUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiUsages.
     */
    cursor?: ApiUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiUsages.
     */
    distinct?: ApiUsageScalarFieldEnum | ApiUsageScalarFieldEnum[]
  }


  /**
   * ApiUsage findFirstOrThrow
   */
  export type ApiUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiUsage to fetch.
     */
    where?: ApiUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiUsages to fetch.
     */
    orderBy?: ApiUsageOrderByWithRelationInput | ApiUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiUsages.
     */
    cursor?: ApiUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiUsages.
     */
    distinct?: ApiUsageScalarFieldEnum | ApiUsageScalarFieldEnum[]
  }


  /**
   * ApiUsage findMany
   */
  export type ApiUsageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiUsages to fetch.
     */
    where?: ApiUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiUsages to fetch.
     */
    orderBy?: ApiUsageOrderByWithRelationInput | ApiUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiUsages.
     */
    cursor?: ApiUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiUsages.
     */
    skip?: number
    distinct?: ApiUsageScalarFieldEnum | ApiUsageScalarFieldEnum[]
  }


  /**
   * ApiUsage create
   */
  export type ApiUsageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a ApiUsage.
     */
    data: XOR<ApiUsageCreateInput, ApiUsageUncheckedCreateInput>
  }


  /**
   * ApiUsage createMany
   */
  export type ApiUsageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiUsages.
     */
    data: ApiUsageCreateManyInput | ApiUsageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ApiUsage update
   */
  export type ApiUsageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a ApiUsage.
     */
    data: XOR<ApiUsageUpdateInput, ApiUsageUncheckedUpdateInput>
    /**
     * Choose, which ApiUsage to update.
     */
    where: ApiUsageWhereUniqueInput
  }


  /**
   * ApiUsage updateMany
   */
  export type ApiUsageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiUsages.
     */
    data: XOR<ApiUsageUpdateManyMutationInput, ApiUsageUncheckedUpdateManyInput>
    /**
     * Filter which ApiUsages to update
     */
    where?: ApiUsageWhereInput
  }


  /**
   * ApiUsage upsert
   */
  export type ApiUsageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the ApiUsage to update in case it exists.
     */
    where: ApiUsageWhereUniqueInput
    /**
     * In case the ApiUsage found by the `where` argument doesn't exist, create a new ApiUsage with this data.
     */
    create: XOR<ApiUsageCreateInput, ApiUsageUncheckedCreateInput>
    /**
     * In case the ApiUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiUsageUpdateInput, ApiUsageUncheckedUpdateInput>
  }


  /**
   * ApiUsage delete
   */
  export type ApiUsageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
    /**
     * Filter which ApiUsage to delete.
     */
    where: ApiUsageWhereUniqueInput
  }


  /**
   * ApiUsage deleteMany
   */
  export type ApiUsageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiUsages to delete
     */
    where?: ApiUsageWhereInput
  }


  /**
   * ApiUsage without action
   */
  export type ApiUsageDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiUsage
     */
    select?: ApiUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApiUsageInclude<ExtArgs> | null
  }



  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _avg: SystemConfigAvgAggregateOutputType | null
    _sum: SystemConfigSumAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type SystemConfigSumAggregateOutputType = {
    id: number | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: number | null
    key: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: number | null
    key: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemConfigAvgAggregateInputType = {
    id?: true
  }

  export type SystemConfigSumAggregateInputType = {
    id?: true
  }

  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _avg?: SystemConfigAvgAggregateInputType
    _sum?: SystemConfigSumAggregateInputType
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: number
    key: string
    value: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: SystemConfigCountAggregateOutputType | null
    _avg: SystemConfigAvgAggregateOutputType | null
    _sum: SystemConfigSumAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SystemConfigPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      key: string
      value: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }


  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SystemConfigFindManyArgs, 'select' | 'include'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SystemConfigFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SystemConfig that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SystemConfigFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SystemConfigFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
    **/
    create<T extends SystemConfigCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SystemConfigs.
     *     @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     *     @example
     *     // Create many SystemConfigs
     *     const systemConfig = await prisma.systemConfig.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SystemConfigCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
    **/
    delete<T extends SystemConfigDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SystemConfigUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SystemConfigDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SystemConfigUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
    **/
    upsert<T extends SystemConfigUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>
    ): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SystemConfig model
   */ 
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'Int'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'Json'>
    readonly createdAt: FieldRef<"SystemConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemConfig", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }


  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }


  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }


  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }


  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }


  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }


  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }


  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
  }


  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }


  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }


  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
  }


  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    company: string | null
    role: string | null
    apiKeyHash: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    company: string | null
    role: string | null
    apiKeyHash: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    company: number
    role: number
    apiKeyHash: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    company?: true
    role?: true
    apiKeyHash?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    company?: true
    role?: true
    apiKeyHash?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    company?: true
    role?: true
    apiKeyHash?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string | null
    company: string | null
    role: string
    apiKeyHash: string | null
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    company?: boolean
    role?: boolean
    apiKeyHash?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    company?: boolean
    role?: boolean
    apiKeyHash?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      email: string
      password: string
      name: string | null
      company: string | null
      role: string
      apiKeyHash: string | null
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly company: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly apiKeyHash: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    displayName: 'displayName',
    category: 'category',
    apiKeyEncrypted: 'apiKeyEncrypted',
    baseUrl: 'baseUrl',
    rateLimit: 'rateLimit',
    dailyQuota: 'dailyQuota',
    isActive: 'isActive',
    configuration: 'configuration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProviderScalarFieldEnum = (typeof ProviderScalarFieldEnum)[keyof typeof ProviderScalarFieldEnum]


  export const ProviderFeatureScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    featureId: 'featureId',
    featureName: 'featureName',
    category: 'category',
    endpoint: 'endpoint',
    httpMethod: 'httpMethod',
    creditsPerRequest: 'creditsPerRequest',
    isActive: 'isActive',
    parameters: 'parameters',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type ProviderFeatureScalarFieldEnum = (typeof ProviderFeatureScalarFieldEnum)[keyof typeof ProviderFeatureScalarFieldEnum]


  export const EnrichmentJobScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    jobType: 'jobType',
    status: 'status',
    totalRecords: 'totalRecords',
    processedRecords: 'processedRecords',
    successfulRecords: 'successfulRecords',
    failedRecords: 'failedRecords',
    inputData: 'inputData',
    outputData: 'outputData',
    configuration: 'configuration',
    creditsUsed: 'creditsUsed',
    errorDetails: 'errorDetails',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EnrichmentJobScalarFieldEnum = (typeof EnrichmentJobScalarFieldEnum)[keyof typeof EnrichmentJobScalarFieldEnum]


  export const JobLogScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    level: 'level',
    message: 'message',
    details: 'details',
    timestamp: 'timestamp'
  };

  export type JobLogScalarFieldEnum = (typeof JobLogScalarFieldEnum)[keyof typeof JobLogScalarFieldEnum]


  export const ApiUsageScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    endpoint: 'endpoint',
    method: 'method',
    statusCode: 'statusCode',
    creditsUsed: 'creditsUsed',
    responseTime: 'responseTime',
    timestamp: 'timestamp'
  };

  export type ApiUsageScalarFieldEnum = (typeof ApiUsageScalarFieldEnum)[keyof typeof ApiUsageScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    company: 'company',
    role: 'role',
    apiKeyHash: 'apiKeyHash',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ProviderWhereInput = {
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    id?: IntFilter<"Provider"> | number
    name?: StringFilter<"Provider"> | string
    displayName?: StringFilter<"Provider"> | string
    category?: StringFilter<"Provider"> | string
    apiKeyEncrypted?: StringNullableFilter<"Provider"> | string | null
    baseUrl?: StringFilter<"Provider"> | string
    rateLimit?: IntFilter<"Provider"> | number
    dailyQuota?: IntFilter<"Provider"> | number
    isActive?: BoolFilter<"Provider"> | boolean
    configuration?: JsonNullableFilter<"Provider">
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    features?: ProviderFeatureListRelationFilter
    apiUsage?: ApiUsageListRelationFilter
    enrichmentJobs?: EnrichmentJobListRelationFilter
  }

  export type ProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    category?: SortOrder
    apiKeyEncrypted?: SortOrderInput | SortOrder
    baseUrl?: SortOrder
    rateLimit?: SortOrder
    dailyQuota?: SortOrder
    isActive?: SortOrder
    configuration?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    features?: ProviderFeatureOrderByRelationAggregateInput
    apiUsage?: ApiUsageOrderByRelationAggregateInput
    enrichmentJobs?: EnrichmentJobOrderByRelationAggregateInput
  }

  export type ProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    displayName?: StringFilter<"Provider"> | string
    category?: StringFilter<"Provider"> | string
    apiKeyEncrypted?: StringNullableFilter<"Provider"> | string | null
    baseUrl?: StringFilter<"Provider"> | string
    rateLimit?: IntFilter<"Provider"> | number
    dailyQuota?: IntFilter<"Provider"> | number
    isActive?: BoolFilter<"Provider"> | boolean
    configuration?: JsonNullableFilter<"Provider">
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    features?: ProviderFeatureListRelationFilter
    apiUsage?: ApiUsageListRelationFilter
    enrichmentJobs?: EnrichmentJobListRelationFilter
  }, "id" | "name">

  export type ProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    category?: SortOrder
    apiKeyEncrypted?: SortOrderInput | SortOrder
    baseUrl?: SortOrder
    rateLimit?: SortOrder
    dailyQuota?: SortOrder
    isActive?: SortOrder
    configuration?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProviderCountOrderByAggregateInput
    _avg?: ProviderAvgOrderByAggregateInput
    _max?: ProviderMaxOrderByAggregateInput
    _min?: ProviderMinOrderByAggregateInput
    _sum?: ProviderSumOrderByAggregateInput
  }

  export type ProviderScalarWhereWithAggregatesInput = {
    AND?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    OR?: ProviderScalarWhereWithAggregatesInput[]
    NOT?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Provider"> | number
    name?: StringWithAggregatesFilter<"Provider"> | string
    displayName?: StringWithAggregatesFilter<"Provider"> | string
    category?: StringWithAggregatesFilter<"Provider"> | string
    apiKeyEncrypted?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    baseUrl?: StringWithAggregatesFilter<"Provider"> | string
    rateLimit?: IntWithAggregatesFilter<"Provider"> | number
    dailyQuota?: IntWithAggregatesFilter<"Provider"> | number
    isActive?: BoolWithAggregatesFilter<"Provider"> | boolean
    configuration?: JsonNullableWithAggregatesFilter<"Provider">
    createdAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
  }

  export type ProviderFeatureWhereInput = {
    AND?: ProviderFeatureWhereInput | ProviderFeatureWhereInput[]
    OR?: ProviderFeatureWhereInput[]
    NOT?: ProviderFeatureWhereInput | ProviderFeatureWhereInput[]
    id?: IntFilter<"ProviderFeature"> | number
    providerId?: IntFilter<"ProviderFeature"> | number
    featureId?: StringFilter<"ProviderFeature"> | string
    featureName?: StringFilter<"ProviderFeature"> | string
    category?: StringFilter<"ProviderFeature"> | string
    endpoint?: StringFilter<"ProviderFeature"> | string
    httpMethod?: StringFilter<"ProviderFeature"> | string
    creditsPerRequest?: IntFilter<"ProviderFeature"> | number
    isActive?: BoolFilter<"ProviderFeature"> | boolean
    parameters?: JsonNullableFilter<"ProviderFeature">
    description?: StringNullableFilter<"ProviderFeature"> | string | null
    createdAt?: DateTimeFilter<"ProviderFeature"> | Date | string
    provider?: XOR<ProviderRelationFilter, ProviderWhereInput>
  }

  export type ProviderFeatureOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    featureId?: SortOrder
    featureName?: SortOrder
    category?: SortOrder
    endpoint?: SortOrder
    httpMethod?: SortOrder
    creditsPerRequest?: SortOrder
    isActive?: SortOrder
    parameters?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    provider?: ProviderOrderByWithRelationInput
  }

  export type ProviderFeatureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    providerId_featureId?: ProviderFeatureProviderIdFeatureIdCompoundUniqueInput
    AND?: ProviderFeatureWhereInput | ProviderFeatureWhereInput[]
    OR?: ProviderFeatureWhereInput[]
    NOT?: ProviderFeatureWhereInput | ProviderFeatureWhereInput[]
    providerId?: IntFilter<"ProviderFeature"> | number
    featureId?: StringFilter<"ProviderFeature"> | string
    featureName?: StringFilter<"ProviderFeature"> | string
    category?: StringFilter<"ProviderFeature"> | string
    endpoint?: StringFilter<"ProviderFeature"> | string
    httpMethod?: StringFilter<"ProviderFeature"> | string
    creditsPerRequest?: IntFilter<"ProviderFeature"> | number
    isActive?: BoolFilter<"ProviderFeature"> | boolean
    parameters?: JsonNullableFilter<"ProviderFeature">
    description?: StringNullableFilter<"ProviderFeature"> | string | null
    createdAt?: DateTimeFilter<"ProviderFeature"> | Date | string
    provider?: XOR<ProviderRelationFilter, ProviderWhereInput>
  }, "id" | "providerId_featureId">

  export type ProviderFeatureOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    featureId?: SortOrder
    featureName?: SortOrder
    category?: SortOrder
    endpoint?: SortOrder
    httpMethod?: SortOrder
    creditsPerRequest?: SortOrder
    isActive?: SortOrder
    parameters?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ProviderFeatureCountOrderByAggregateInput
    _avg?: ProviderFeatureAvgOrderByAggregateInput
    _max?: ProviderFeatureMaxOrderByAggregateInput
    _min?: ProviderFeatureMinOrderByAggregateInput
    _sum?: ProviderFeatureSumOrderByAggregateInput
  }

  export type ProviderFeatureScalarWhereWithAggregatesInput = {
    AND?: ProviderFeatureScalarWhereWithAggregatesInput | ProviderFeatureScalarWhereWithAggregatesInput[]
    OR?: ProviderFeatureScalarWhereWithAggregatesInput[]
    NOT?: ProviderFeatureScalarWhereWithAggregatesInput | ProviderFeatureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProviderFeature"> | number
    providerId?: IntWithAggregatesFilter<"ProviderFeature"> | number
    featureId?: StringWithAggregatesFilter<"ProviderFeature"> | string
    featureName?: StringWithAggregatesFilter<"ProviderFeature"> | string
    category?: StringWithAggregatesFilter<"ProviderFeature"> | string
    endpoint?: StringWithAggregatesFilter<"ProviderFeature"> | string
    httpMethod?: StringWithAggregatesFilter<"ProviderFeature"> | string
    creditsPerRequest?: IntWithAggregatesFilter<"ProviderFeature"> | number
    isActive?: BoolWithAggregatesFilter<"ProviderFeature"> | boolean
    parameters?: JsonNullableWithAggregatesFilter<"ProviderFeature">
    description?: StringNullableWithAggregatesFilter<"ProviderFeature"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProviderFeature"> | Date | string
  }

  export type EnrichmentJobWhereInput = {
    AND?: EnrichmentJobWhereInput | EnrichmentJobWhereInput[]
    OR?: EnrichmentJobWhereInput[]
    NOT?: EnrichmentJobWhereInput | EnrichmentJobWhereInput[]
    id?: StringFilter<"EnrichmentJob"> | string
    providerId?: IntNullableFilter<"EnrichmentJob"> | number | null
    jobType?: StringFilter<"EnrichmentJob"> | string
    status?: StringFilter<"EnrichmentJob"> | string
    totalRecords?: IntFilter<"EnrichmentJob"> | number
    processedRecords?: IntFilter<"EnrichmentJob"> | number
    successfulRecords?: IntFilter<"EnrichmentJob"> | number
    failedRecords?: IntFilter<"EnrichmentJob"> | number
    inputData?: JsonNullableFilter<"EnrichmentJob">
    outputData?: JsonNullableFilter<"EnrichmentJob">
    configuration?: JsonNullableFilter<"EnrichmentJob">
    creditsUsed?: IntFilter<"EnrichmentJob"> | number
    errorDetails?: JsonNullableFilter<"EnrichmentJob">
    startedAt?: DateTimeNullableFilter<"EnrichmentJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"EnrichmentJob"> | Date | string | null
    createdAt?: DateTimeFilter<"EnrichmentJob"> | Date | string
    updatedAt?: DateTimeFilter<"EnrichmentJob"> | Date | string
    provider?: XOR<ProviderNullableRelationFilter, ProviderWhereInput> | null
    logs?: JobLogListRelationFilter
  }

  export type EnrichmentJobOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrderInput | SortOrder
    jobType?: SortOrder
    status?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successfulRecords?: SortOrder
    failedRecords?: SortOrder
    inputData?: SortOrderInput | SortOrder
    outputData?: SortOrderInput | SortOrder
    configuration?: SortOrderInput | SortOrder
    creditsUsed?: SortOrder
    errorDetails?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    provider?: ProviderOrderByWithRelationInput
    logs?: JobLogOrderByRelationAggregateInput
  }

  export type EnrichmentJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EnrichmentJobWhereInput | EnrichmentJobWhereInput[]
    OR?: EnrichmentJobWhereInput[]
    NOT?: EnrichmentJobWhereInput | EnrichmentJobWhereInput[]
    providerId?: IntNullableFilter<"EnrichmentJob"> | number | null
    jobType?: StringFilter<"EnrichmentJob"> | string
    status?: StringFilter<"EnrichmentJob"> | string
    totalRecords?: IntFilter<"EnrichmentJob"> | number
    processedRecords?: IntFilter<"EnrichmentJob"> | number
    successfulRecords?: IntFilter<"EnrichmentJob"> | number
    failedRecords?: IntFilter<"EnrichmentJob"> | number
    inputData?: JsonNullableFilter<"EnrichmentJob">
    outputData?: JsonNullableFilter<"EnrichmentJob">
    configuration?: JsonNullableFilter<"EnrichmentJob">
    creditsUsed?: IntFilter<"EnrichmentJob"> | number
    errorDetails?: JsonNullableFilter<"EnrichmentJob">
    startedAt?: DateTimeNullableFilter<"EnrichmentJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"EnrichmentJob"> | Date | string | null
    createdAt?: DateTimeFilter<"EnrichmentJob"> | Date | string
    updatedAt?: DateTimeFilter<"EnrichmentJob"> | Date | string
    provider?: XOR<ProviderNullableRelationFilter, ProviderWhereInput> | null
    logs?: JobLogListRelationFilter
  }, "id">

  export type EnrichmentJobOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrderInput | SortOrder
    jobType?: SortOrder
    status?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successfulRecords?: SortOrder
    failedRecords?: SortOrder
    inputData?: SortOrderInput | SortOrder
    outputData?: SortOrderInput | SortOrder
    configuration?: SortOrderInput | SortOrder
    creditsUsed?: SortOrder
    errorDetails?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EnrichmentJobCountOrderByAggregateInput
    _avg?: EnrichmentJobAvgOrderByAggregateInput
    _max?: EnrichmentJobMaxOrderByAggregateInput
    _min?: EnrichmentJobMinOrderByAggregateInput
    _sum?: EnrichmentJobSumOrderByAggregateInput
  }

  export type EnrichmentJobScalarWhereWithAggregatesInput = {
    AND?: EnrichmentJobScalarWhereWithAggregatesInput | EnrichmentJobScalarWhereWithAggregatesInput[]
    OR?: EnrichmentJobScalarWhereWithAggregatesInput[]
    NOT?: EnrichmentJobScalarWhereWithAggregatesInput | EnrichmentJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EnrichmentJob"> | string
    providerId?: IntNullableWithAggregatesFilter<"EnrichmentJob"> | number | null
    jobType?: StringWithAggregatesFilter<"EnrichmentJob"> | string
    status?: StringWithAggregatesFilter<"EnrichmentJob"> | string
    totalRecords?: IntWithAggregatesFilter<"EnrichmentJob"> | number
    processedRecords?: IntWithAggregatesFilter<"EnrichmentJob"> | number
    successfulRecords?: IntWithAggregatesFilter<"EnrichmentJob"> | number
    failedRecords?: IntWithAggregatesFilter<"EnrichmentJob"> | number
    inputData?: JsonNullableWithAggregatesFilter<"EnrichmentJob">
    outputData?: JsonNullableWithAggregatesFilter<"EnrichmentJob">
    configuration?: JsonNullableWithAggregatesFilter<"EnrichmentJob">
    creditsUsed?: IntWithAggregatesFilter<"EnrichmentJob"> | number
    errorDetails?: JsonNullableWithAggregatesFilter<"EnrichmentJob">
    startedAt?: DateTimeNullableWithAggregatesFilter<"EnrichmentJob"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"EnrichmentJob"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EnrichmentJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EnrichmentJob"> | Date | string
  }

  export type JobLogWhereInput = {
    AND?: JobLogWhereInput | JobLogWhereInput[]
    OR?: JobLogWhereInput[]
    NOT?: JobLogWhereInput | JobLogWhereInput[]
    id?: IntFilter<"JobLog"> | number
    jobId?: StringFilter<"JobLog"> | string
    level?: StringFilter<"JobLog"> | string
    message?: StringFilter<"JobLog"> | string
    details?: JsonNullableFilter<"JobLog">
    timestamp?: DateTimeFilter<"JobLog"> | Date | string
    job?: XOR<EnrichmentJobRelationFilter, EnrichmentJobWhereInput>
  }

  export type JobLogOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    details?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    job?: EnrichmentJobOrderByWithRelationInput
  }

  export type JobLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobLogWhereInput | JobLogWhereInput[]
    OR?: JobLogWhereInput[]
    NOT?: JobLogWhereInput | JobLogWhereInput[]
    jobId?: StringFilter<"JobLog"> | string
    level?: StringFilter<"JobLog"> | string
    message?: StringFilter<"JobLog"> | string
    details?: JsonNullableFilter<"JobLog">
    timestamp?: DateTimeFilter<"JobLog"> | Date | string
    job?: XOR<EnrichmentJobRelationFilter, EnrichmentJobWhereInput>
  }, "id">

  export type JobLogOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    details?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: JobLogCountOrderByAggregateInput
    _avg?: JobLogAvgOrderByAggregateInput
    _max?: JobLogMaxOrderByAggregateInput
    _min?: JobLogMinOrderByAggregateInput
    _sum?: JobLogSumOrderByAggregateInput
  }

  export type JobLogScalarWhereWithAggregatesInput = {
    AND?: JobLogScalarWhereWithAggregatesInput | JobLogScalarWhereWithAggregatesInput[]
    OR?: JobLogScalarWhereWithAggregatesInput[]
    NOT?: JobLogScalarWhereWithAggregatesInput | JobLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobLog"> | number
    jobId?: StringWithAggregatesFilter<"JobLog"> | string
    level?: StringWithAggregatesFilter<"JobLog"> | string
    message?: StringWithAggregatesFilter<"JobLog"> | string
    details?: JsonNullableWithAggregatesFilter<"JobLog">
    timestamp?: DateTimeWithAggregatesFilter<"JobLog"> | Date | string
  }

  export type ApiUsageWhereInput = {
    AND?: ApiUsageWhereInput | ApiUsageWhereInput[]
    OR?: ApiUsageWhereInput[]
    NOT?: ApiUsageWhereInput | ApiUsageWhereInput[]
    id?: IntFilter<"ApiUsage"> | number
    providerId?: IntFilter<"ApiUsage"> | number
    endpoint?: StringFilter<"ApiUsage"> | string
    method?: StringFilter<"ApiUsage"> | string
    statusCode?: IntFilter<"ApiUsage"> | number
    creditsUsed?: IntFilter<"ApiUsage"> | number
    responseTime?: IntFilter<"ApiUsage"> | number
    timestamp?: DateTimeFilter<"ApiUsage"> | Date | string
    provider?: XOR<ProviderRelationFilter, ProviderWhereInput>
  }

  export type ApiUsageOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    creditsUsed?: SortOrder
    responseTime?: SortOrder
    timestamp?: SortOrder
    provider?: ProviderOrderByWithRelationInput
  }

  export type ApiUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ApiUsageWhereInput | ApiUsageWhereInput[]
    OR?: ApiUsageWhereInput[]
    NOT?: ApiUsageWhereInput | ApiUsageWhereInput[]
    providerId?: IntFilter<"ApiUsage"> | number
    endpoint?: StringFilter<"ApiUsage"> | string
    method?: StringFilter<"ApiUsage"> | string
    statusCode?: IntFilter<"ApiUsage"> | number
    creditsUsed?: IntFilter<"ApiUsage"> | number
    responseTime?: IntFilter<"ApiUsage"> | number
    timestamp?: DateTimeFilter<"ApiUsage"> | Date | string
    provider?: XOR<ProviderRelationFilter, ProviderWhereInput>
  }, "id">

  export type ApiUsageOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    creditsUsed?: SortOrder
    responseTime?: SortOrder
    timestamp?: SortOrder
    _count?: ApiUsageCountOrderByAggregateInput
    _avg?: ApiUsageAvgOrderByAggregateInput
    _max?: ApiUsageMaxOrderByAggregateInput
    _min?: ApiUsageMinOrderByAggregateInput
    _sum?: ApiUsageSumOrderByAggregateInput
  }

  export type ApiUsageScalarWhereWithAggregatesInput = {
    AND?: ApiUsageScalarWhereWithAggregatesInput | ApiUsageScalarWhereWithAggregatesInput[]
    OR?: ApiUsageScalarWhereWithAggregatesInput[]
    NOT?: ApiUsageScalarWhereWithAggregatesInput | ApiUsageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ApiUsage"> | number
    providerId?: IntWithAggregatesFilter<"ApiUsage"> | number
    endpoint?: StringWithAggregatesFilter<"ApiUsage"> | string
    method?: StringWithAggregatesFilter<"ApiUsage"> | string
    statusCode?: IntWithAggregatesFilter<"ApiUsage"> | number
    creditsUsed?: IntWithAggregatesFilter<"ApiUsage"> | number
    responseTime?: IntWithAggregatesFilter<"ApiUsage"> | number
    timestamp?: DateTimeWithAggregatesFilter<"ApiUsage"> | Date | string
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: IntFilter<"SystemConfig"> | number
    key?: StringFilter<"SystemConfig"> | string
    value?: JsonFilter<"SystemConfig">
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: JsonFilter<"SystemConfig">
    createdAt?: DateTimeFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _avg?: SystemConfigAvgOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
    _sum?: SystemConfigSumOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemConfig"> | number
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: JsonWithAggregatesFilter<"SystemConfig">
    createdAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    apiKeyHash?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    role?: SortOrder
    apiKeyHash?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    apiKeyHash?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email" | "apiKeyHash">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    role?: SortOrder
    apiKeyHash?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    company?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    apiKeyHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProviderCreateInput = {
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    features?: ProviderFeatureCreateNestedManyWithoutProviderInput
    apiUsage?: ApiUsageCreateNestedManyWithoutProviderInput
    enrichmentJobs?: EnrichmentJobCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateInput = {
    id?: number
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    features?: ProviderFeatureUncheckedCreateNestedManyWithoutProviderInput
    apiUsage?: ApiUsageUncheckedCreateNestedManyWithoutProviderInput
    enrichmentJobs?: EnrichmentJobUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    features?: ProviderFeatureUpdateManyWithoutProviderNestedInput
    apiUsage?: ApiUsageUpdateManyWithoutProviderNestedInput
    enrichmentJobs?: EnrichmentJobUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    features?: ProviderFeatureUncheckedUpdateManyWithoutProviderNestedInput
    apiUsage?: ApiUsageUncheckedUpdateManyWithoutProviderNestedInput
    enrichmentJobs?: EnrichmentJobUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderCreateManyInput = {
    id?: number
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProviderUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderFeatureCreateInput = {
    featureId: string
    featureName: string
    category: string
    endpoint: string
    httpMethod?: string
    creditsPerRequest?: number
    isActive?: boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    createdAt?: Date | string
    provider: ProviderCreateNestedOneWithoutFeaturesInput
  }

  export type ProviderFeatureUncheckedCreateInput = {
    id?: number
    providerId: number
    featureId: string
    featureName: string
    category: string
    endpoint: string
    httpMethod?: string
    creditsPerRequest?: number
    isActive?: boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    createdAt?: Date | string
  }

  export type ProviderFeatureUpdateInput = {
    featureId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    httpMethod?: StringFieldUpdateOperationsInput | string
    creditsPerRequest?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutFeaturesNestedInput
  }

  export type ProviderFeatureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    providerId?: IntFieldUpdateOperationsInput | number
    featureId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    httpMethod?: StringFieldUpdateOperationsInput | string
    creditsPerRequest?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderFeatureCreateManyInput = {
    id?: number
    providerId: number
    featureId: string
    featureName: string
    category: string
    endpoint: string
    httpMethod?: string
    creditsPerRequest?: number
    isActive?: boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    createdAt?: Date | string
  }

  export type ProviderFeatureUpdateManyMutationInput = {
    featureId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    httpMethod?: StringFieldUpdateOperationsInput | string
    creditsPerRequest?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderFeatureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    providerId?: IntFieldUpdateOperationsInput | number
    featureId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    httpMethod?: StringFieldUpdateOperationsInput | string
    creditsPerRequest?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrichmentJobCreateInput = {
    id?: string
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutEnrichmentJobsInput
    logs?: JobLogCreateNestedManyWithoutJobInput
  }

  export type EnrichmentJobUncheckedCreateInput = {
    id?: string
    providerId?: number | null
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: JobLogUncheckedCreateNestedManyWithoutJobInput
  }

  export type EnrichmentJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutEnrichmentJobsNestedInput
    logs?: JobLogUpdateManyWithoutJobNestedInput
  }

  export type EnrichmentJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: NullableIntFieldUpdateOperationsInput | number | null
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: JobLogUncheckedUpdateManyWithoutJobNestedInput
  }

  export type EnrichmentJobCreateManyInput = {
    id?: string
    providerId?: number | null
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrichmentJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrichmentJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: NullableIntFieldUpdateOperationsInput | number | null
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLogCreateInput = {
    level: string
    message: string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    job: EnrichmentJobCreateNestedOneWithoutLogsInput
  }

  export type JobLogUncheckedCreateInput = {
    id?: number
    jobId: string
    level: string
    message: string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type JobLogUpdateInput = {
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: EnrichmentJobUpdateOneRequiredWithoutLogsNestedInput
  }

  export type JobLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLogCreateManyInput = {
    id?: number
    jobId: string
    level: string
    message: string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type JobLogUpdateManyMutationInput = {
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiUsageCreateInput = {
    endpoint: string
    method: string
    statusCode: number
    creditsUsed?: number
    responseTime: number
    timestamp?: Date | string
    provider: ProviderCreateNestedOneWithoutApiUsageInput
  }

  export type ApiUsageUncheckedCreateInput = {
    id?: number
    providerId: number
    endpoint: string
    method: string
    statusCode: number
    creditsUsed?: number
    responseTime: number
    timestamp?: Date | string
  }

  export type ApiUsageUpdateInput = {
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    creditsUsed?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutApiUsageNestedInput
  }

  export type ApiUsageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    providerId?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    creditsUsed?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiUsageCreateManyInput = {
    id?: number
    providerId: number
    endpoint: string
    method: string
    statusCode: number
    creditsUsed?: number
    responseTime: number
    timestamp?: Date | string
  }

  export type ApiUsageUpdateManyMutationInput = {
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    creditsUsed?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiUsageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    providerId?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    creditsUsed?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateInput = {
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: number
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateManyInput = {
    id?: number
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    company?: string | null
    role?: string
    apiKeyHash?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    company?: string | null
    role?: string
    apiKeyHash?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    apiKeyHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    apiKeyHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    company?: string | null
    role?: string
    apiKeyHash?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    apiKeyHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    apiKeyHash?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProviderFeatureListRelationFilter = {
    every?: ProviderFeatureWhereInput
    some?: ProviderFeatureWhereInput
    none?: ProviderFeatureWhereInput
  }

  export type ApiUsageListRelationFilter = {
    every?: ApiUsageWhereInput
    some?: ApiUsageWhereInput
    none?: ApiUsageWhereInput
  }

  export type EnrichmentJobListRelationFilter = {
    every?: EnrichmentJobWhereInput
    some?: EnrichmentJobWhereInput
    none?: EnrichmentJobWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProviderFeatureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnrichmentJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    category?: SortOrder
    apiKeyEncrypted?: SortOrder
    baseUrl?: SortOrder
    rateLimit?: SortOrder
    dailyQuota?: SortOrder
    isActive?: SortOrder
    configuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProviderAvgOrderByAggregateInput = {
    id?: SortOrder
    rateLimit?: SortOrder
    dailyQuota?: SortOrder
  }

  export type ProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    category?: SortOrder
    apiKeyEncrypted?: SortOrder
    baseUrl?: SortOrder
    rateLimit?: SortOrder
    dailyQuota?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    category?: SortOrder
    apiKeyEncrypted?: SortOrder
    baseUrl?: SortOrder
    rateLimit?: SortOrder
    dailyQuota?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProviderSumOrderByAggregateInput = {
    id?: SortOrder
    rateLimit?: SortOrder
    dailyQuota?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProviderRelationFilter = {
    is?: ProviderWhereInput
    isNot?: ProviderWhereInput
  }

  export type ProviderFeatureProviderIdFeatureIdCompoundUniqueInput = {
    providerId: number
    featureId: string
  }

  export type ProviderFeatureCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    featureId?: SortOrder
    featureName?: SortOrder
    category?: SortOrder
    endpoint?: SortOrder
    httpMethod?: SortOrder
    creditsPerRequest?: SortOrder
    isActive?: SortOrder
    parameters?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderFeatureAvgOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    creditsPerRequest?: SortOrder
  }

  export type ProviderFeatureMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    featureId?: SortOrder
    featureName?: SortOrder
    category?: SortOrder
    endpoint?: SortOrder
    httpMethod?: SortOrder
    creditsPerRequest?: SortOrder
    isActive?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderFeatureMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    featureId?: SortOrder
    featureName?: SortOrder
    category?: SortOrder
    endpoint?: SortOrder
    httpMethod?: SortOrder
    creditsPerRequest?: SortOrder
    isActive?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderFeatureSumOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    creditsPerRequest?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProviderNullableRelationFilter = {
    is?: ProviderWhereInput | null
    isNot?: ProviderWhereInput | null
  }

  export type JobLogListRelationFilter = {
    every?: JobLogWhereInput
    some?: JobLogWhereInput
    none?: JobLogWhereInput
  }

  export type JobLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnrichmentJobCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successfulRecords?: SortOrder
    failedRecords?: SortOrder
    inputData?: SortOrder
    outputData?: SortOrder
    configuration?: SortOrder
    creditsUsed?: SortOrder
    errorDetails?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrichmentJobAvgOrderByAggregateInput = {
    providerId?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successfulRecords?: SortOrder
    failedRecords?: SortOrder
    creditsUsed?: SortOrder
  }

  export type EnrichmentJobMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successfulRecords?: SortOrder
    failedRecords?: SortOrder
    creditsUsed?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrichmentJobMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    jobType?: SortOrder
    status?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successfulRecords?: SortOrder
    failedRecords?: SortOrder
    creditsUsed?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrichmentJobSumOrderByAggregateInput = {
    providerId?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successfulRecords?: SortOrder
    failedRecords?: SortOrder
    creditsUsed?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnrichmentJobRelationFilter = {
    is?: EnrichmentJobWhereInput
    isNot?: EnrichmentJobWhereInput
  }

  export type JobLogCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type JobLogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JobLogMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type JobLogMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    level?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type JobLogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ApiUsageCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    creditsUsed?: SortOrder
    responseTime?: SortOrder
    timestamp?: SortOrder
  }

  export type ApiUsageAvgOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    statusCode?: SortOrder
    creditsUsed?: SortOrder
    responseTime?: SortOrder
  }

  export type ApiUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    creditsUsed?: SortOrder
    responseTime?: SortOrder
    timestamp?: SortOrder
  }

  export type ApiUsageMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    creditsUsed?: SortOrder
    responseTime?: SortOrder
    timestamp?: SortOrder
  }

  export type ApiUsageSumOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    statusCode?: SortOrder
    creditsUsed?: SortOrder
    responseTime?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    company?: SortOrder
    role?: SortOrder
    apiKeyHash?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    company?: SortOrder
    role?: SortOrder
    apiKeyHash?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    company?: SortOrder
    role?: SortOrder
    apiKeyHash?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProviderFeatureCreateNestedManyWithoutProviderInput = {
    create?: XOR<ProviderFeatureCreateWithoutProviderInput, ProviderFeatureUncheckedCreateWithoutProviderInput> | ProviderFeatureCreateWithoutProviderInput[] | ProviderFeatureUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderFeatureCreateOrConnectWithoutProviderInput | ProviderFeatureCreateOrConnectWithoutProviderInput[]
    createMany?: ProviderFeatureCreateManyProviderInputEnvelope
    connect?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
  }

  export type ApiUsageCreateNestedManyWithoutProviderInput = {
    create?: XOR<ApiUsageCreateWithoutProviderInput, ApiUsageUncheckedCreateWithoutProviderInput> | ApiUsageCreateWithoutProviderInput[] | ApiUsageUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ApiUsageCreateOrConnectWithoutProviderInput | ApiUsageCreateOrConnectWithoutProviderInput[]
    createMany?: ApiUsageCreateManyProviderInputEnvelope
    connect?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
  }

  export type EnrichmentJobCreateNestedManyWithoutProviderInput = {
    create?: XOR<EnrichmentJobCreateWithoutProviderInput, EnrichmentJobUncheckedCreateWithoutProviderInput> | EnrichmentJobCreateWithoutProviderInput[] | EnrichmentJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: EnrichmentJobCreateOrConnectWithoutProviderInput | EnrichmentJobCreateOrConnectWithoutProviderInput[]
    createMany?: EnrichmentJobCreateManyProviderInputEnvelope
    connect?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
  }

  export type ProviderFeatureUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ProviderFeatureCreateWithoutProviderInput, ProviderFeatureUncheckedCreateWithoutProviderInput> | ProviderFeatureCreateWithoutProviderInput[] | ProviderFeatureUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderFeatureCreateOrConnectWithoutProviderInput | ProviderFeatureCreateOrConnectWithoutProviderInput[]
    createMany?: ProviderFeatureCreateManyProviderInputEnvelope
    connect?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
  }

  export type ApiUsageUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ApiUsageCreateWithoutProviderInput, ApiUsageUncheckedCreateWithoutProviderInput> | ApiUsageCreateWithoutProviderInput[] | ApiUsageUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ApiUsageCreateOrConnectWithoutProviderInput | ApiUsageCreateOrConnectWithoutProviderInput[]
    createMany?: ApiUsageCreateManyProviderInputEnvelope
    connect?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
  }

  export type EnrichmentJobUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<EnrichmentJobCreateWithoutProviderInput, EnrichmentJobUncheckedCreateWithoutProviderInput> | EnrichmentJobCreateWithoutProviderInput[] | EnrichmentJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: EnrichmentJobCreateOrConnectWithoutProviderInput | EnrichmentJobCreateOrConnectWithoutProviderInput[]
    createMany?: EnrichmentJobCreateManyProviderInputEnvelope
    connect?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProviderFeatureUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ProviderFeatureCreateWithoutProviderInput, ProviderFeatureUncheckedCreateWithoutProviderInput> | ProviderFeatureCreateWithoutProviderInput[] | ProviderFeatureUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderFeatureCreateOrConnectWithoutProviderInput | ProviderFeatureCreateOrConnectWithoutProviderInput[]
    upsert?: ProviderFeatureUpsertWithWhereUniqueWithoutProviderInput | ProviderFeatureUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ProviderFeatureCreateManyProviderInputEnvelope
    set?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    disconnect?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    delete?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    connect?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    update?: ProviderFeatureUpdateWithWhereUniqueWithoutProviderInput | ProviderFeatureUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ProviderFeatureUpdateManyWithWhereWithoutProviderInput | ProviderFeatureUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ProviderFeatureScalarWhereInput | ProviderFeatureScalarWhereInput[]
  }

  export type ApiUsageUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ApiUsageCreateWithoutProviderInput, ApiUsageUncheckedCreateWithoutProviderInput> | ApiUsageCreateWithoutProviderInput[] | ApiUsageUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ApiUsageCreateOrConnectWithoutProviderInput | ApiUsageCreateOrConnectWithoutProviderInput[]
    upsert?: ApiUsageUpsertWithWhereUniqueWithoutProviderInput | ApiUsageUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ApiUsageCreateManyProviderInputEnvelope
    set?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    disconnect?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    delete?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    connect?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    update?: ApiUsageUpdateWithWhereUniqueWithoutProviderInput | ApiUsageUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ApiUsageUpdateManyWithWhereWithoutProviderInput | ApiUsageUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ApiUsageScalarWhereInput | ApiUsageScalarWhereInput[]
  }

  export type EnrichmentJobUpdateManyWithoutProviderNestedInput = {
    create?: XOR<EnrichmentJobCreateWithoutProviderInput, EnrichmentJobUncheckedCreateWithoutProviderInput> | EnrichmentJobCreateWithoutProviderInput[] | EnrichmentJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: EnrichmentJobCreateOrConnectWithoutProviderInput | EnrichmentJobCreateOrConnectWithoutProviderInput[]
    upsert?: EnrichmentJobUpsertWithWhereUniqueWithoutProviderInput | EnrichmentJobUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: EnrichmentJobCreateManyProviderInputEnvelope
    set?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    disconnect?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    delete?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    connect?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    update?: EnrichmentJobUpdateWithWhereUniqueWithoutProviderInput | EnrichmentJobUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: EnrichmentJobUpdateManyWithWhereWithoutProviderInput | EnrichmentJobUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: EnrichmentJobScalarWhereInput | EnrichmentJobScalarWhereInput[]
  }

  export type ProviderFeatureUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ProviderFeatureCreateWithoutProviderInput, ProviderFeatureUncheckedCreateWithoutProviderInput> | ProviderFeatureCreateWithoutProviderInput[] | ProviderFeatureUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderFeatureCreateOrConnectWithoutProviderInput | ProviderFeatureCreateOrConnectWithoutProviderInput[]
    upsert?: ProviderFeatureUpsertWithWhereUniqueWithoutProviderInput | ProviderFeatureUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ProviderFeatureCreateManyProviderInputEnvelope
    set?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    disconnect?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    delete?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    connect?: ProviderFeatureWhereUniqueInput | ProviderFeatureWhereUniqueInput[]
    update?: ProviderFeatureUpdateWithWhereUniqueWithoutProviderInput | ProviderFeatureUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ProviderFeatureUpdateManyWithWhereWithoutProviderInput | ProviderFeatureUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ProviderFeatureScalarWhereInput | ProviderFeatureScalarWhereInput[]
  }

  export type ApiUsageUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ApiUsageCreateWithoutProviderInput, ApiUsageUncheckedCreateWithoutProviderInput> | ApiUsageCreateWithoutProviderInput[] | ApiUsageUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ApiUsageCreateOrConnectWithoutProviderInput | ApiUsageCreateOrConnectWithoutProviderInput[]
    upsert?: ApiUsageUpsertWithWhereUniqueWithoutProviderInput | ApiUsageUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ApiUsageCreateManyProviderInputEnvelope
    set?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    disconnect?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    delete?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    connect?: ApiUsageWhereUniqueInput | ApiUsageWhereUniqueInput[]
    update?: ApiUsageUpdateWithWhereUniqueWithoutProviderInput | ApiUsageUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ApiUsageUpdateManyWithWhereWithoutProviderInput | ApiUsageUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ApiUsageScalarWhereInput | ApiUsageScalarWhereInput[]
  }

  export type EnrichmentJobUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<EnrichmentJobCreateWithoutProviderInput, EnrichmentJobUncheckedCreateWithoutProviderInput> | EnrichmentJobCreateWithoutProviderInput[] | EnrichmentJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: EnrichmentJobCreateOrConnectWithoutProviderInput | EnrichmentJobCreateOrConnectWithoutProviderInput[]
    upsert?: EnrichmentJobUpsertWithWhereUniqueWithoutProviderInput | EnrichmentJobUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: EnrichmentJobCreateManyProviderInputEnvelope
    set?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    disconnect?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    delete?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    connect?: EnrichmentJobWhereUniqueInput | EnrichmentJobWhereUniqueInput[]
    update?: EnrichmentJobUpdateWithWhereUniqueWithoutProviderInput | EnrichmentJobUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: EnrichmentJobUpdateManyWithWhereWithoutProviderInput | EnrichmentJobUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: EnrichmentJobScalarWhereInput | EnrichmentJobScalarWhereInput[]
  }

  export type ProviderCreateNestedOneWithoutFeaturesInput = {
    create?: XOR<ProviderCreateWithoutFeaturesInput, ProviderUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutFeaturesInput
    connect?: ProviderWhereUniqueInput
  }

  export type ProviderUpdateOneRequiredWithoutFeaturesNestedInput = {
    create?: XOR<ProviderCreateWithoutFeaturesInput, ProviderUncheckedCreateWithoutFeaturesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutFeaturesInput
    upsert?: ProviderUpsertWithoutFeaturesInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutFeaturesInput, ProviderUpdateWithoutFeaturesInput>, ProviderUncheckedUpdateWithoutFeaturesInput>
  }

  export type ProviderCreateNestedOneWithoutEnrichmentJobsInput = {
    create?: XOR<ProviderCreateWithoutEnrichmentJobsInput, ProviderUncheckedCreateWithoutEnrichmentJobsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutEnrichmentJobsInput
    connect?: ProviderWhereUniqueInput
  }

  export type JobLogCreateNestedManyWithoutJobInput = {
    create?: XOR<JobLogCreateWithoutJobInput, JobLogUncheckedCreateWithoutJobInput> | JobLogCreateWithoutJobInput[] | JobLogUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobLogCreateOrConnectWithoutJobInput | JobLogCreateOrConnectWithoutJobInput[]
    createMany?: JobLogCreateManyJobInputEnvelope
    connect?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
  }

  export type JobLogUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobLogCreateWithoutJobInput, JobLogUncheckedCreateWithoutJobInput> | JobLogCreateWithoutJobInput[] | JobLogUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobLogCreateOrConnectWithoutJobInput | JobLogCreateOrConnectWithoutJobInput[]
    createMany?: JobLogCreateManyJobInputEnvelope
    connect?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProviderUpdateOneWithoutEnrichmentJobsNestedInput = {
    create?: XOR<ProviderCreateWithoutEnrichmentJobsInput, ProviderUncheckedCreateWithoutEnrichmentJobsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutEnrichmentJobsInput
    upsert?: ProviderUpsertWithoutEnrichmentJobsInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutEnrichmentJobsInput, ProviderUpdateWithoutEnrichmentJobsInput>, ProviderUncheckedUpdateWithoutEnrichmentJobsInput>
  }

  export type JobLogUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobLogCreateWithoutJobInput, JobLogUncheckedCreateWithoutJobInput> | JobLogCreateWithoutJobInput[] | JobLogUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobLogCreateOrConnectWithoutJobInput | JobLogCreateOrConnectWithoutJobInput[]
    upsert?: JobLogUpsertWithWhereUniqueWithoutJobInput | JobLogUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobLogCreateManyJobInputEnvelope
    set?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    disconnect?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    delete?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    connect?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    update?: JobLogUpdateWithWhereUniqueWithoutJobInput | JobLogUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobLogUpdateManyWithWhereWithoutJobInput | JobLogUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobLogScalarWhereInput | JobLogScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobLogUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobLogCreateWithoutJobInput, JobLogUncheckedCreateWithoutJobInput> | JobLogCreateWithoutJobInput[] | JobLogUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobLogCreateOrConnectWithoutJobInput | JobLogCreateOrConnectWithoutJobInput[]
    upsert?: JobLogUpsertWithWhereUniqueWithoutJobInput | JobLogUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobLogCreateManyJobInputEnvelope
    set?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    disconnect?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    delete?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    connect?: JobLogWhereUniqueInput | JobLogWhereUniqueInput[]
    update?: JobLogUpdateWithWhereUniqueWithoutJobInput | JobLogUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobLogUpdateManyWithWhereWithoutJobInput | JobLogUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobLogScalarWhereInput | JobLogScalarWhereInput[]
  }

  export type EnrichmentJobCreateNestedOneWithoutLogsInput = {
    create?: XOR<EnrichmentJobCreateWithoutLogsInput, EnrichmentJobUncheckedCreateWithoutLogsInput>
    connectOrCreate?: EnrichmentJobCreateOrConnectWithoutLogsInput
    connect?: EnrichmentJobWhereUniqueInput
  }

  export type EnrichmentJobUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<EnrichmentJobCreateWithoutLogsInput, EnrichmentJobUncheckedCreateWithoutLogsInput>
    connectOrCreate?: EnrichmentJobCreateOrConnectWithoutLogsInput
    upsert?: EnrichmentJobUpsertWithoutLogsInput
    connect?: EnrichmentJobWhereUniqueInput
    update?: XOR<XOR<EnrichmentJobUpdateToOneWithWhereWithoutLogsInput, EnrichmentJobUpdateWithoutLogsInput>, EnrichmentJobUncheckedUpdateWithoutLogsInput>
  }

  export type ProviderCreateNestedOneWithoutApiUsageInput = {
    create?: XOR<ProviderCreateWithoutApiUsageInput, ProviderUncheckedCreateWithoutApiUsageInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutApiUsageInput
    connect?: ProviderWhereUniqueInput
  }

  export type ProviderUpdateOneRequiredWithoutApiUsageNestedInput = {
    create?: XOR<ProviderCreateWithoutApiUsageInput, ProviderUncheckedCreateWithoutApiUsageInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutApiUsageInput
    upsert?: ProviderUpsertWithoutApiUsageInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutApiUsageInput, ProviderUpdateWithoutApiUsageInput>, ProviderUncheckedUpdateWithoutApiUsageInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProviderFeatureCreateWithoutProviderInput = {
    featureId: string
    featureName: string
    category: string
    endpoint: string
    httpMethod?: string
    creditsPerRequest?: number
    isActive?: boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    createdAt?: Date | string
  }

  export type ProviderFeatureUncheckedCreateWithoutProviderInput = {
    id?: number
    featureId: string
    featureName: string
    category: string
    endpoint: string
    httpMethod?: string
    creditsPerRequest?: number
    isActive?: boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    createdAt?: Date | string
  }

  export type ProviderFeatureCreateOrConnectWithoutProviderInput = {
    where: ProviderFeatureWhereUniqueInput
    create: XOR<ProviderFeatureCreateWithoutProviderInput, ProviderFeatureUncheckedCreateWithoutProviderInput>
  }

  export type ProviderFeatureCreateManyProviderInputEnvelope = {
    data: ProviderFeatureCreateManyProviderInput | ProviderFeatureCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ApiUsageCreateWithoutProviderInput = {
    endpoint: string
    method: string
    statusCode: number
    creditsUsed?: number
    responseTime: number
    timestamp?: Date | string
  }

  export type ApiUsageUncheckedCreateWithoutProviderInput = {
    id?: number
    endpoint: string
    method: string
    statusCode: number
    creditsUsed?: number
    responseTime: number
    timestamp?: Date | string
  }

  export type ApiUsageCreateOrConnectWithoutProviderInput = {
    where: ApiUsageWhereUniqueInput
    create: XOR<ApiUsageCreateWithoutProviderInput, ApiUsageUncheckedCreateWithoutProviderInput>
  }

  export type ApiUsageCreateManyProviderInputEnvelope = {
    data: ApiUsageCreateManyProviderInput | ApiUsageCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type EnrichmentJobCreateWithoutProviderInput = {
    id?: string
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: JobLogCreateNestedManyWithoutJobInput
  }

  export type EnrichmentJobUncheckedCreateWithoutProviderInput = {
    id?: string
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logs?: JobLogUncheckedCreateNestedManyWithoutJobInput
  }

  export type EnrichmentJobCreateOrConnectWithoutProviderInput = {
    where: EnrichmentJobWhereUniqueInput
    create: XOR<EnrichmentJobCreateWithoutProviderInput, EnrichmentJobUncheckedCreateWithoutProviderInput>
  }

  export type EnrichmentJobCreateManyProviderInputEnvelope = {
    data: EnrichmentJobCreateManyProviderInput | EnrichmentJobCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ProviderFeatureUpsertWithWhereUniqueWithoutProviderInput = {
    where: ProviderFeatureWhereUniqueInput
    update: XOR<ProviderFeatureUpdateWithoutProviderInput, ProviderFeatureUncheckedUpdateWithoutProviderInput>
    create: XOR<ProviderFeatureCreateWithoutProviderInput, ProviderFeatureUncheckedCreateWithoutProviderInput>
  }

  export type ProviderFeatureUpdateWithWhereUniqueWithoutProviderInput = {
    where: ProviderFeatureWhereUniqueInput
    data: XOR<ProviderFeatureUpdateWithoutProviderInput, ProviderFeatureUncheckedUpdateWithoutProviderInput>
  }

  export type ProviderFeatureUpdateManyWithWhereWithoutProviderInput = {
    where: ProviderFeatureScalarWhereInput
    data: XOR<ProviderFeatureUpdateManyMutationInput, ProviderFeatureUncheckedUpdateManyWithoutProviderInput>
  }

  export type ProviderFeatureScalarWhereInput = {
    AND?: ProviderFeatureScalarWhereInput | ProviderFeatureScalarWhereInput[]
    OR?: ProviderFeatureScalarWhereInput[]
    NOT?: ProviderFeatureScalarWhereInput | ProviderFeatureScalarWhereInput[]
    id?: IntFilter<"ProviderFeature"> | number
    providerId?: IntFilter<"ProviderFeature"> | number
    featureId?: StringFilter<"ProviderFeature"> | string
    featureName?: StringFilter<"ProviderFeature"> | string
    category?: StringFilter<"ProviderFeature"> | string
    endpoint?: StringFilter<"ProviderFeature"> | string
    httpMethod?: StringFilter<"ProviderFeature"> | string
    creditsPerRequest?: IntFilter<"ProviderFeature"> | number
    isActive?: BoolFilter<"ProviderFeature"> | boolean
    parameters?: JsonNullableFilter<"ProviderFeature">
    description?: StringNullableFilter<"ProviderFeature"> | string | null
    createdAt?: DateTimeFilter<"ProviderFeature"> | Date | string
  }

  export type ApiUsageUpsertWithWhereUniqueWithoutProviderInput = {
    where: ApiUsageWhereUniqueInput
    update: XOR<ApiUsageUpdateWithoutProviderInput, ApiUsageUncheckedUpdateWithoutProviderInput>
    create: XOR<ApiUsageCreateWithoutProviderInput, ApiUsageUncheckedCreateWithoutProviderInput>
  }

  export type ApiUsageUpdateWithWhereUniqueWithoutProviderInput = {
    where: ApiUsageWhereUniqueInput
    data: XOR<ApiUsageUpdateWithoutProviderInput, ApiUsageUncheckedUpdateWithoutProviderInput>
  }

  export type ApiUsageUpdateManyWithWhereWithoutProviderInput = {
    where: ApiUsageScalarWhereInput
    data: XOR<ApiUsageUpdateManyMutationInput, ApiUsageUncheckedUpdateManyWithoutProviderInput>
  }

  export type ApiUsageScalarWhereInput = {
    AND?: ApiUsageScalarWhereInput | ApiUsageScalarWhereInput[]
    OR?: ApiUsageScalarWhereInput[]
    NOT?: ApiUsageScalarWhereInput | ApiUsageScalarWhereInput[]
    id?: IntFilter<"ApiUsage"> | number
    providerId?: IntFilter<"ApiUsage"> | number
    endpoint?: StringFilter<"ApiUsage"> | string
    method?: StringFilter<"ApiUsage"> | string
    statusCode?: IntFilter<"ApiUsage"> | number
    creditsUsed?: IntFilter<"ApiUsage"> | number
    responseTime?: IntFilter<"ApiUsage"> | number
    timestamp?: DateTimeFilter<"ApiUsage"> | Date | string
  }

  export type EnrichmentJobUpsertWithWhereUniqueWithoutProviderInput = {
    where: EnrichmentJobWhereUniqueInput
    update: XOR<EnrichmentJobUpdateWithoutProviderInput, EnrichmentJobUncheckedUpdateWithoutProviderInput>
    create: XOR<EnrichmentJobCreateWithoutProviderInput, EnrichmentJobUncheckedCreateWithoutProviderInput>
  }

  export type EnrichmentJobUpdateWithWhereUniqueWithoutProviderInput = {
    where: EnrichmentJobWhereUniqueInput
    data: XOR<EnrichmentJobUpdateWithoutProviderInput, EnrichmentJobUncheckedUpdateWithoutProviderInput>
  }

  export type EnrichmentJobUpdateManyWithWhereWithoutProviderInput = {
    where: EnrichmentJobScalarWhereInput
    data: XOR<EnrichmentJobUpdateManyMutationInput, EnrichmentJobUncheckedUpdateManyWithoutProviderInput>
  }

  export type EnrichmentJobScalarWhereInput = {
    AND?: EnrichmentJobScalarWhereInput | EnrichmentJobScalarWhereInput[]
    OR?: EnrichmentJobScalarWhereInput[]
    NOT?: EnrichmentJobScalarWhereInput | EnrichmentJobScalarWhereInput[]
    id?: StringFilter<"EnrichmentJob"> | string
    providerId?: IntNullableFilter<"EnrichmentJob"> | number | null
    jobType?: StringFilter<"EnrichmentJob"> | string
    status?: StringFilter<"EnrichmentJob"> | string
    totalRecords?: IntFilter<"EnrichmentJob"> | number
    processedRecords?: IntFilter<"EnrichmentJob"> | number
    successfulRecords?: IntFilter<"EnrichmentJob"> | number
    failedRecords?: IntFilter<"EnrichmentJob"> | number
    inputData?: JsonNullableFilter<"EnrichmentJob">
    outputData?: JsonNullableFilter<"EnrichmentJob">
    configuration?: JsonNullableFilter<"EnrichmentJob">
    creditsUsed?: IntFilter<"EnrichmentJob"> | number
    errorDetails?: JsonNullableFilter<"EnrichmentJob">
    startedAt?: DateTimeNullableFilter<"EnrichmentJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"EnrichmentJob"> | Date | string | null
    createdAt?: DateTimeFilter<"EnrichmentJob"> | Date | string
    updatedAt?: DateTimeFilter<"EnrichmentJob"> | Date | string
  }

  export type ProviderCreateWithoutFeaturesInput = {
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    apiUsage?: ApiUsageCreateNestedManyWithoutProviderInput
    enrichmentJobs?: EnrichmentJobCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutFeaturesInput = {
    id?: number
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    apiUsage?: ApiUsageUncheckedCreateNestedManyWithoutProviderInput
    enrichmentJobs?: EnrichmentJobUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutFeaturesInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutFeaturesInput, ProviderUncheckedCreateWithoutFeaturesInput>
  }

  export type ProviderUpsertWithoutFeaturesInput = {
    update: XOR<ProviderUpdateWithoutFeaturesInput, ProviderUncheckedUpdateWithoutFeaturesInput>
    create: XOR<ProviderCreateWithoutFeaturesInput, ProviderUncheckedCreateWithoutFeaturesInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutFeaturesInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutFeaturesInput, ProviderUncheckedUpdateWithoutFeaturesInput>
  }

  export type ProviderUpdateWithoutFeaturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiUsage?: ApiUsageUpdateManyWithoutProviderNestedInput
    enrichmentJobs?: EnrichmentJobUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiUsage?: ApiUsageUncheckedUpdateManyWithoutProviderNestedInput
    enrichmentJobs?: EnrichmentJobUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderCreateWithoutEnrichmentJobsInput = {
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    features?: ProviderFeatureCreateNestedManyWithoutProviderInput
    apiUsage?: ApiUsageCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutEnrichmentJobsInput = {
    id?: number
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    features?: ProviderFeatureUncheckedCreateNestedManyWithoutProviderInput
    apiUsage?: ApiUsageUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutEnrichmentJobsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutEnrichmentJobsInput, ProviderUncheckedCreateWithoutEnrichmentJobsInput>
  }

  export type JobLogCreateWithoutJobInput = {
    level: string
    message: string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type JobLogUncheckedCreateWithoutJobInput = {
    id?: number
    level: string
    message: string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type JobLogCreateOrConnectWithoutJobInput = {
    where: JobLogWhereUniqueInput
    create: XOR<JobLogCreateWithoutJobInput, JobLogUncheckedCreateWithoutJobInput>
  }

  export type JobLogCreateManyJobInputEnvelope = {
    data: JobLogCreateManyJobInput | JobLogCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type ProviderUpsertWithoutEnrichmentJobsInput = {
    update: XOR<ProviderUpdateWithoutEnrichmentJobsInput, ProviderUncheckedUpdateWithoutEnrichmentJobsInput>
    create: XOR<ProviderCreateWithoutEnrichmentJobsInput, ProviderUncheckedCreateWithoutEnrichmentJobsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutEnrichmentJobsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutEnrichmentJobsInput, ProviderUncheckedUpdateWithoutEnrichmentJobsInput>
  }

  export type ProviderUpdateWithoutEnrichmentJobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    features?: ProviderFeatureUpdateManyWithoutProviderNestedInput
    apiUsage?: ApiUsageUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutEnrichmentJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    features?: ProviderFeatureUncheckedUpdateManyWithoutProviderNestedInput
    apiUsage?: ApiUsageUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type JobLogUpsertWithWhereUniqueWithoutJobInput = {
    where: JobLogWhereUniqueInput
    update: XOR<JobLogUpdateWithoutJobInput, JobLogUncheckedUpdateWithoutJobInput>
    create: XOR<JobLogCreateWithoutJobInput, JobLogUncheckedCreateWithoutJobInput>
  }

  export type JobLogUpdateWithWhereUniqueWithoutJobInput = {
    where: JobLogWhereUniqueInput
    data: XOR<JobLogUpdateWithoutJobInput, JobLogUncheckedUpdateWithoutJobInput>
  }

  export type JobLogUpdateManyWithWhereWithoutJobInput = {
    where: JobLogScalarWhereInput
    data: XOR<JobLogUpdateManyMutationInput, JobLogUncheckedUpdateManyWithoutJobInput>
  }

  export type JobLogScalarWhereInput = {
    AND?: JobLogScalarWhereInput | JobLogScalarWhereInput[]
    OR?: JobLogScalarWhereInput[]
    NOT?: JobLogScalarWhereInput | JobLogScalarWhereInput[]
    id?: IntFilter<"JobLog"> | number
    jobId?: StringFilter<"JobLog"> | string
    level?: StringFilter<"JobLog"> | string
    message?: StringFilter<"JobLog"> | string
    details?: JsonNullableFilter<"JobLog">
    timestamp?: DateTimeFilter<"JobLog"> | Date | string
  }

  export type EnrichmentJobCreateWithoutLogsInput = {
    id?: string
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutEnrichmentJobsInput
  }

  export type EnrichmentJobUncheckedCreateWithoutLogsInput = {
    id?: string
    providerId?: number | null
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrichmentJobCreateOrConnectWithoutLogsInput = {
    where: EnrichmentJobWhereUniqueInput
    create: XOR<EnrichmentJobCreateWithoutLogsInput, EnrichmentJobUncheckedCreateWithoutLogsInput>
  }

  export type EnrichmentJobUpsertWithoutLogsInput = {
    update: XOR<EnrichmentJobUpdateWithoutLogsInput, EnrichmentJobUncheckedUpdateWithoutLogsInput>
    create: XOR<EnrichmentJobCreateWithoutLogsInput, EnrichmentJobUncheckedCreateWithoutLogsInput>
    where?: EnrichmentJobWhereInput
  }

  export type EnrichmentJobUpdateToOneWithWhereWithoutLogsInput = {
    where?: EnrichmentJobWhereInput
    data: XOR<EnrichmentJobUpdateWithoutLogsInput, EnrichmentJobUncheckedUpdateWithoutLogsInput>
  }

  export type EnrichmentJobUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutEnrichmentJobsNestedInput
  }

  export type EnrichmentJobUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: NullableIntFieldUpdateOperationsInput | number | null
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderCreateWithoutApiUsageInput = {
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    features?: ProviderFeatureCreateNestedManyWithoutProviderInput
    enrichmentJobs?: EnrichmentJobCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutApiUsageInput = {
    id?: number
    name: string
    displayName: string
    category: string
    apiKeyEncrypted?: string | null
    baseUrl: string
    rateLimit?: number
    dailyQuota?: number
    isActive?: boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    features?: ProviderFeatureUncheckedCreateNestedManyWithoutProviderInput
    enrichmentJobs?: EnrichmentJobUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutApiUsageInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutApiUsageInput, ProviderUncheckedCreateWithoutApiUsageInput>
  }

  export type ProviderUpsertWithoutApiUsageInput = {
    update: XOR<ProviderUpdateWithoutApiUsageInput, ProviderUncheckedUpdateWithoutApiUsageInput>
    create: XOR<ProviderCreateWithoutApiUsageInput, ProviderUncheckedCreateWithoutApiUsageInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutApiUsageInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutApiUsageInput, ProviderUncheckedUpdateWithoutApiUsageInput>
  }

  export type ProviderUpdateWithoutApiUsageInput = {
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    features?: ProviderFeatureUpdateManyWithoutProviderNestedInput
    enrichmentJobs?: EnrichmentJobUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutApiUsageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    baseUrl?: StringFieldUpdateOperationsInput | string
    rateLimit?: IntFieldUpdateOperationsInput | number
    dailyQuota?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    configuration?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    features?: ProviderFeatureUncheckedUpdateManyWithoutProviderNestedInput
    enrichmentJobs?: EnrichmentJobUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderFeatureCreateManyProviderInput = {
    id?: number
    featureId: string
    featureName: string
    category: string
    endpoint: string
    httpMethod?: string
    creditsPerRequest?: number
    isActive?: boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    createdAt?: Date | string
  }

  export type ApiUsageCreateManyProviderInput = {
    id?: number
    endpoint: string
    method: string
    statusCode: number
    creditsUsed?: number
    responseTime: number
    timestamp?: Date | string
  }

  export type EnrichmentJobCreateManyProviderInput = {
    id?: string
    jobType: string
    status?: string
    totalRecords?: number
    processedRecords?: number
    successfulRecords?: number
    failedRecords?: number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProviderFeatureUpdateWithoutProviderInput = {
    featureId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    httpMethod?: StringFieldUpdateOperationsInput | string
    creditsPerRequest?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderFeatureUncheckedUpdateWithoutProviderInput = {
    id?: IntFieldUpdateOperationsInput | number
    featureId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    httpMethod?: StringFieldUpdateOperationsInput | string
    creditsPerRequest?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderFeatureUncheckedUpdateManyWithoutProviderInput = {
    id?: IntFieldUpdateOperationsInput | number
    featureId?: StringFieldUpdateOperationsInput | string
    featureName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    httpMethod?: StringFieldUpdateOperationsInput | string
    creditsPerRequest?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    parameters?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiUsageUpdateWithoutProviderInput = {
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    creditsUsed?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiUsageUncheckedUpdateWithoutProviderInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    creditsUsed?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiUsageUncheckedUpdateManyWithoutProviderInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    creditsUsed?: IntFieldUpdateOperationsInput | number
    responseTime?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrichmentJobUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: JobLogUpdateManyWithoutJobNestedInput
  }

  export type EnrichmentJobUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: JobLogUncheckedUpdateManyWithoutJobNestedInput
  }

  export type EnrichmentJobUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successfulRecords?: IntFieldUpdateOperationsInput | number
    failedRecords?: IntFieldUpdateOperationsInput | number
    inputData?: NullableJsonNullValueInput | InputJsonValue
    outputData?: NullableJsonNullValueInput | InputJsonValue
    configuration?: NullableJsonNullValueInput | InputJsonValue
    creditsUsed?: IntFieldUpdateOperationsInput | number
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLogCreateManyJobInput = {
    id?: number
    level: string
    message: string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type JobLogUpdateWithoutJobInput = {
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLogUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLogUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProviderDefaultArgs instead
     */
    export type ProviderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProviderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProviderFeatureDefaultArgs instead
     */
    export type ProviderFeatureArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProviderFeatureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnrichmentJobDefaultArgs instead
     */
    export type EnrichmentJobArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = EnrichmentJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobLogDefaultArgs instead
     */
    export type JobLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = JobLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApiUsageDefaultArgs instead
     */
    export type ApiUsageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ApiUsageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemConfigDefaultArgs instead
     */
    export type SystemConfigArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SystemConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}