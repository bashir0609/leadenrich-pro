generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  name       String?
  company    String?
  role       String    @default("user")
  apiKeyHash String?   @unique
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // User relationships
  apiKeys        ApiKey[]
  enrichmentJobs EnrichmentJob[]
}

model Provider {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  displayName     String
  category        String
  apiKeyEncrypted String?
  baseUrl         String
  rateLimit       Int      @default(10)
  dailyQuota      Int      @default(2000)
  isActive        Boolean  @default(true)
  configuration   String? // JSON as string for SQLite
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Provider relationships
  features       ProviderFeature[]
  apiUsage       ApiUsage[]
  enrichmentJobs EnrichmentJob[]
  apiKeys        ApiKey[]

  @@map("providers")
}

model ApiKey {
  id         String   @id @default(cuid())
  name       String
  keyValue   String
  providerId Int // References Provider.id
  userId     String // References User.id
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model ProviderFeature {
  id                Int      @id @default(autoincrement())
  providerId        Int
  featureId         String
  featureName       String
  category          String
  endpoint          String
  httpMethod        String   @default("POST")
  creditsPerRequest Int      @default(1)
  isActive          Boolean  @default(true)
  parameters        String? // JSON as string
  description       String?
  createdAt         DateTime @default(now())

  // Relationships
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, featureId])
  @@map("provider_features")
}

model EnrichmentJob {
  id                String    @id @default(cuid())
  providerId        Int?
  userId            String // References User.id - who owns this job
  jobType           String
  status            String    @default("pending")
  totalRecords      Int       @default(0)
  processedRecords  Int       @default(0)
  successfulRecords Int       @default(0)
  failedRecords     Int       @default(0)
  inputData         String? // JSON as string
  outputData        String? // JSON as string
  configuration     String? // JSON as string
  creditsUsed       Int       @default(0)
  errorDetails      String? // JSON as string
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  provider Provider? @relation(fields: [providerId], references: [id])
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs     JobLog[]

  @@map("enrichment_jobs")
}

model JobLog {
  id        Int      @id @default(autoincrement())
  jobId     String
  level     String
  message   String
  details   String? // JSON as string
  timestamp DateTime @default(now())

  // Relationships
  job EnrichmentJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_logs")
}

model ApiUsage {
  id           Int      @id @default(autoincrement())
  providerId   Int
  endpoint     String
  method       String
  statusCode   Int
  creditsUsed  Int      @default(0)
  responseTime Int
  timestamp    DateTime @default(now())

  // Relationships
  provider Provider @relation(fields: [providerId], references: [id])

  @@map("api_usage")
}

model SystemConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String // JSON as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}
