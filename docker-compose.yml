services:
  # --- APPLICATION SERVICES ---
  
  backend:
    # This tells Docker to build the image from the Dockerfile in your ./backend directory
    build: ./backend
    container_name: leadenrich_backend
    restart: unless-stopped
    env_file:
    - ./backend/.env  # Add this line to load the backend .env file
    ports:
      # Exposes the backend's port 8000 to your machine's port 8000
      - "3001:3001"
    environment:
      # --- IMPORTANT: Use service names, not 'localhost' ---
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: leadenrich
      POSTGRES_PASSWORD: leadenrich_dev_2024
      POSTGRES_DB: leadenrich_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: leadenrich_redis_2024
      DATABASE_URL: postgresql://leadenrich:leadenrich_dev_2024@postgres:5432/leadenrich_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./scripts/wait-for-it.sh", "postgres:5432", "--", "node", "dist/app.js"]

  frontend:
    # This tells Docker to build the image from the Dockerfile in your ./frontend directory
    build: ./frontend
    container_name: leadenrich_frontend
    restart: unless-stopped
    ports:
      # Exposes the Next.js port 3000
      - "3000:3000"
    depends_on:
      - backend

  # --- DATABASE SERVICES (from your file) ---

  postgres:
    image: postgres:15-alpine
    container_name: leadenrich_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: leadenrich
      POSTGRES_PASSWORD: leadenrich_dev_2024
      POSTGRES_DB: leadenrich_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leadenrich"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: leadenrich_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass leadenrich_redis_2024
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "leadenrich_redis_2024", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data: